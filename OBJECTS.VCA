SCCTEXT Version 4.0.0.2
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _1VN0X06P4
[CLASS] cus
[CLASSLOC] ch_0.vcx
[BASECLASS] custom
[OBJNAME] oapp
[START PROPERTIES]
Height = 16
Width = 100
p_default_path = 
p_startup_directory = 
p_startup_setpath = 
p_computer_id = 
p_computer_userid = 
p_computer_network_id = 
p_application_name = 
p_data_type = 
p_development_mode = .T.
p_unprintableletters = 
p_active_control = 
p_active_form = 
p_database_tracking = 
p_error_origination = 
p_data_location = 
p_schedule_start_date = {}
p_schedule_type = -1
p_schedule_need_caption = ************
p_schedule_ongoing = .F.
p_skip_tracking = .F.
p_skip_global_pk = .F.
p_fk_employee = 0
p_employee_name_full = 
p_drag_flag = 0
p_payrate = 0
p_fk_client = 0
p_application_security_level = 0
p_payor_history_authorization = 14
p_payor_history = 14
p_schedule_weeks_look_ahead = 8
p_application_user_fullname = 
p_audit_history = .T.
p_fk_user = 0
p_message_timer_interval = 120000
p_fk_office = 0
p_dbc_identy = 
p_data_location_bit = 0
p_schedule_weeks_look_behind = 8
p_first_day_of_week = 1
p_auto_create_auth = .T.
p_date_selected = {}
p_runpayroll = .F.
p_training = .F.
p_runbilling = .F.
p_1500 = .F.
p_username_firstlast = .F.
p_upaycont = .F.
p_payreports = .F.
p_oig = .T.
p_report_location = .F.
Name = "oapp"
[END PROPERTIES]
[START METHODS]
PROCEDURE Init
*!* Program:
*!* Author: Ron Haugen
*!* Date: 08/21/06 03:25:36 PM
*!* Copyright: Companions and Homemakers
*!* Description: oApp is the Global Application Object
*!* Revision Information:


Lparameters lcsetdatapath , lcdatatype, lcapplicationname, lcuserid

*MESSAGEBOX('3'+lcUserid)
*** lcSetDataPath will be true when we should set data paths
*** lcDataType is either Live or Test
*** lcApplicationName is the name of the applicaiton creating this oApp object

LOCAL lcUserSet, lcRunpath, lFileFind, lcreportlocationfile, lcreportqueuedbc
lcUserSet = GetNetworkUser()
lcRunPath = SYS(5)+SYS(2003)
lFileFind = .T.


With This

	.p_default_path = Set('path')
	.p_startup_directory = Sys(5) + Sys(2003)
	.p_startup_setpath	= Set('path')
	.p_computer_id = Lower(Left(Sys(0),Atc(' ',Sys(0))-1))
	If Empty(lcuserid)
		.p_computer_userid = Lower(Substr(Sys(0),Atc('#',Sys(0),1) + 2))
	Else
		.p_computer_userid = lcuserid
	Endif
	.p_computer_network_id = Lower(Sys(0))
	.p_application_name = lcapplicationname
	.p_data_type = lcdatatype



	*** look for "ch_data_location.txt" file in program files folder
	*---see if we have a file for this user
	IF ALLTRIM(lcUserSet) == ""
		lcdatalocationfile = lcRunPath+'\ch_data\ch_data_location.txt'
	ELSE
		lcdatalocationfile = lcRunPath+'\ch_data\'+lcUserSet+'_ch_data_location.txt'
	ENDIF

	* try to find the file under the user, if not try to find the generic file
	If ! File(lcdatalocationfile)
		lcdatalocationfile = lcRunPath+'\ch_data\ch_data_location.txt'
		If ! File(lcdatalocationfile)
			lFileFind = .F.
		ENDIF
	ENDIF


	IF  lFileFind
		.p_data_location = MLINE(Alltrim(Filetostr(lcDataLocationFile)),1)
		IF ! EMPTY(MLINE(Alltrim(Filetostr(lcDataLocationFile)),2))
			.p_data_location_bit = VAL(MLINE(Alltrim(Filetostr(lcDataLocationFile)),2))
		ENDIF
		
		
		** now determine if the masterdbc.dbc file exists in that path
		lcmasterdbc = .p_data_location +'\masterdbc\masterdbc.dbc'
		If !File(lcmasterdbc)
			Messagebox('Data was located at '+.p_data_location+Chr(13)+;
				'but now we can not find it.  You will have to locate where Data is located',0+4096,'Error in finding data',6000)
			.p_data_location = ''
		ELSE
			.m_get_authorization(lcdatatype)
			
		Endif


	Else
		.p_data_location = ''
	Endif


	* try to find .txt file determining location for passing OLE report data
	* from RDP HOPE to HOPE Office Link program
		*** look for "ch_data_location.txt" file in program files folder
	*---see if we have a file for this user

	lFileFind = .T.

	lcreportlocationfile = lcRunpath+'\ch_data\ch_report_location.txt'

	* try to find the file under the user, if not try to find the generic file
	IF ! FILE(lcreportlocationfile)
		lFileFind = .F.
	ENDIF

	IF  lFileFind
		.p_report_location = MLINE(ALLTRIM(FILETOSTR(lcreportlocationfile)),1)

		** now determine if the masterdbc.dbc file exists in that path
		lcreportqueuedbc = .p_report_location +'ch_data\reportqueue.dbc'
		IF ! FILE(lcreportqueuedbc)
			*MESSAGEBOX('Report Queue was located at '+.p_report_location+CHR(13)+;
				'but now we can not find it.  You will have to locate where the report queue is located before running ISAs and AH reports.',0+4096,'Error in finding Report Queue',6000)
			.p_report_location = ''
		ENDIF

		c=SECONDS()

	ELSE
		.p_report_location = ''
	ENDIF




	If 'VFP' $ Upper(_Screen.Caption)  &&& WE ARE IN DEVELOPMENT
		.p_development_mode = .T.
	Else
		.p_development_mode = .F.
	Endif

	

	**** used in base editbox class to strip out low ascii letters
	**** became an issue with XMLtoCursor

	If Type('p_unprintableletters') = 'U'
		.AddProperty('p_unprintableletters','')
	Endif

	.p_unprintableletters = ''

	For ix = 1 To 31
		If ( ! Inlist( ix, 9, 10, 13 ) )
			.p_unprintableletters = .p_unprintableletters  + Chr(ix)
		Endif
	Endfor
	*!*		Else
	*!*			.p_data_location = ''
	*!*		Endif

Endwith


*IF this.p_Computer_userid = "haugenr"
*ON KEY LABEL F8 oapp.m_sticky_note
*ON KEY LABEL F9 oapp.m_clear_sticky_note
*ENDIF



this.p_form_list(1) = 'Form List '+TTOC(DATETIME())

IF DATE() => DATE(2009,11,1)
	this.p_first_day_of_week = 1
ENDIF

ENDPROC
PROCEDURE calc_age
Lparameters ldDOB

*---calculate the age of a person or thing given a starting date


LOCAL PassBack
PassBack=0

PassBack = (YEAR(DATE())-YEAR(ldDOB)) + IIF(MONTH(ldDOB)>=MONTH(DATE()) AND DAY(ldDOB) >= DAY(DATE()),0,-1)


RETURN PassBack

ENDPROC
PROCEDURE m_10week_day
*** function to create an interger value = 10* week number + day number

Lparameters ldDateToUse


If Type('ldDateToUse') = 'T'

	ldDateToUse = Ttod(ldDateToUse)
Endif


If  Type('ldDateToUse') = 'D'

	IF EMPTY(ldDateToUse)
		lnReturnValue = 0
	else
		lnReturnValue = 10*This.m_get_week_number(ldDateToUse) +;
			DOW(ldDateToUse,This.p_first_day_of_week)
	ENDIF
	
Else

	lnReturnValue = 0
Endif


RETURN lnReturnValue
ENDPROC
PROCEDURE m_audit_history
LPARAMETERS lcType, lcHistory, lnfk_client, lnfk_employee, lnfk_auth, lnfk_sch_needs, lnfk_sch_employee


*!*	IF FILE(oapp.p_data_location+'\history\history.dbc')

*!*	If !Dbused(oapp.p_data_location+'\history\history.dbc')
*!*		Open Database (oapp.p_data_location+'\masterdbc\masterdbc.dbc') SHARED
*!*		Open Database (oapp.p_data_location+'\history\history.dbc') SHARED
*!*	Endif


*!*	lcUserid = oapp.p_computer_userid
*!*	lcComputerId = oapp.p_computer_network_id
*!*	lcHistory = lcHistory+CHR(13)+'['+lcUserid+'...'+lcComputerId+']'
*!*	ldDate = DATETIME()

*!*	INSERT INTO history!history ;
*!*		(datetime,userid,ctype,history,fk_client,fk_employee,fk_auth,fk_sch_needs,fk_sch_employee) ;
*!*		VALUES ;
*!*		(ldDate, lcUserid,lctype,lcHistory,lnFk_client,lnFk_employee,lnfk_auth,lnfk_sch_needs,lnfk_sch_employee)

*!*	ENDIF
	
ENDPROC
PROCEDURE m_checkbilling
*----check the timecards user to see if they can run billing or 1500

*---created by Mike Harris-Stone
*   1/17/2010

LOCAL lpassback, lDatapath, luser
lDatapath = THIS.p_data_location+"lookups\lookups.dbc"
lUser = ALLTRIM(THIS.p_computer_userid)

THIS.p_runbilling=.T.
THIS.p_1500=.T.

TRY

	OPEN DATABASE (lDatapath) SHARED
	SET DATABASE TO (lDatapath)

	USE Lookups!Lookup IN SELECT(1) SHARED
	
	SELECT ;
		CName ;
	FROM Lookups!Lookup ;
	INTO CURSOR Curs_CheckBilling READWRITE ;
	WHERE ;
		fk_gen_lookup=925 AND UPPER(ALLTRIM(CName))	== UPPER(ALLTRIM(lUser)) ;
	NOWAIT

	SELECT Curs_CheckBilling

	IF _TALLY = 1
		THIS.p_runBilling=.F.
	ENDIF

	SELECT ;
		CName ;
	FROM Lookups!Lookup ;
	INTO CURSOR Curs_CheckBilling READWRITE ;
	WHERE ;
		fk_gen_lookup=926 AND UPPER(ALLTRIM(CName))	== UPPER(ALLTRIM(lUser)) ;
	NOWAIT

	SELECT Curs_CheckBilling

	IF _TALLY = 1
		THIS.p_1500=.F.
	ENDIF

	USE

	CLOSE DATABASE	
	
CATCH

ENDTRY

ENDPROC
PROCEDURE m_checkoig
*----check the reports user to see if they can run the OIG Report

*---created by Mike Harris-Stone
*   6/13/2017

LOCAL lpassback, lDatapath, luser
lDatapath = THIS.p_data_location+"lookups\lookups.dbc"
lUser = ALLTRIM(THIS.p_computer_userid)

THIS.p_oig=.T.


TRY

	OPEN DATABASE (lDatapath) SHARED
	SET DATABASE TO (lDatapath)

	USE Lookups!Lookup IN SELECT(1) SHARED
	
	SELECT ;
		CName ;
	FROM Lookups!Lookup ;
	INTO CURSOR Curs_CheckPay READWRITE ;
	WHERE ;
		fk_gen_lookup=951 AND UPPER(ALLTRIM(CName))	== UPPER(ALLTRIM(lUser)) ;
	NOWAIT

	SELECT Curs_CheckPay

	IF _TALLY >= 1
		THIS.p_oig = .F.
	ENDIF


	USE

	CLOSE DATABASE	
	
CATCH

ENDTRY

ENDPROC
PROCEDURE m_checkpayrate
*----check the timecards user to see if they can run billing or 1500

*---created by Mike Harris-Stone
*   1/15/2013

LOCAL lpassback, lDatapath, luser
lDatapath = THIS.p_data_location+"lookups\lookups.dbc"
lUser = ALLTRIM(THIS.p_computer_userid)

THIS.p_upaycont=.T.
THIS.p_payreports=.T.

TRY

	OPEN DATABASE (lDatapath) SHARED
	SET DATABASE TO (lDatapath)

	USE Lookups!Lookup IN SELECT(1) SHARED
	
	SELECT ;
		CName ;
	FROM Lookups!Lookup ;
	INTO CURSOR Curs_CheckPay READWRITE ;
	WHERE ;
		fk_gen_lookup=936 AND UPPER(ALLTRIM(CName))	== UPPER(ALLTRIM(lUser)) ;
	NOWAIT

	SELECT Curs_CheckPay

	IF _TALLY >= 1
		THIS.p_upaycont=.F.
	ENDIF


	SELECT ;
		CName ;
	FROM Lookups!Lookup ;
	INTO CURSOR Curs_CheckPay2 READWRITE ;
	WHERE ;
		fk_gen_lookup=909 AND UPPER(ALLTRIM(CName))	== UPPER(ALLTRIM(lUser)) ;
	NOWAIT

	SELECT Curs_CheckPay2

	IF _TALLY >= 1
		THIS.p_payreports=.F.
	ENDIF

	USE

	CLOSE DATABASE	
	
CATCH

ENDTRY

ENDPROC
PROCEDURE m_checkpayroll
*----check the timecards user to see if they can run payroll

*---created by Mike Harris-Stone
*   1/17/2010

LOCAL lpassback, lDatapath, luser
lDatapath = THIS.p_data_location+"lookups\lookups.dbc"
lUser = ALLTRIM(THIS.p_computer_userid)

THIS.p_runpayroll=.T.

TRY

	OPEN DATABASE (lDatapath) SHARED
	SET DATABASE TO (lDatapath)

	USE Lookups!Lookup IN SELECT(1) SHARED
	
	SELECT ;
		CName ;
	FROM Lookups!Lookup ;
	INTO CURSOR Curs_CheckPayroll READWRITE ;
	WHERE ;
		fk_gen_lookup=924 AND UPPER(ALLTRIM(CName))	== UPPER(ALLTRIM(lUser)) ;
	NOWAIT

	SELECT Curs_CheckPayroll

	IF _TALLY = 1
		THIS.p_runpayroll=.F.
	ENDIF
	USE

	CLOSE DATABASE	
	
CATCH

ENDTRY



ENDPROC
PROCEDURE m_clear_sticky_note
**** make sure we have userid_wordpad.rtf file
If Messagebox('Are you sure you want to clear your Sticky Note?',0+4+4096,'Clear Sticky Note') = 6
	lcSafety = Set("Safety")

	Set Safety Off

	TEXT TO myRTF noshow

{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\cf1\f0\fs20 Hope Wordpad for Your.Name\par
\par
------------------------------------------------------------------\cf1\par
}

	ENDTEXT



	lcUserID = Strtran(Strtran(Strtran(oapp.p_application_user_fullname,' ',''),'.',''),',','_')
	lcWordPad = 'WordPad_'+lcUserID

	lctempPath = Sys(2023)

	lcWordPadFileName = lctempPath+'\ch_data\'+lcWordPad+'.rtf'

	*IF FILE(lcWordPadFileName)

	myRTF =  Strtran(myRTF , "Your.Name",Alltrim(oapp.p_application_user_fullname))

	Strtofile(myRTF,lcWordPadFileName)

	*ENDIF

	Set Safety &lcSafety
Endif

ENDPROC
PROCEDURE m_does_week_day_fall_in_startd8_endd8
LPARAMETERS lnFk_wk, lnFk_day, ldStartd8, ldEndD8

ldTestDate = this.m_get_date_from_week_day(lnFk_wk,lnFk_day)

lReturnvalue = (ldTestDate => ldStartD8) and (EMPTY(ldEndD8) or ldTestDate <= ldEndD8)

RETURN lReturnValue
ENDPROC
PROCEDURE m_error_message
**LPARAMETER lcFormName  &&lnErrNum, lcErrMsg, lcBadCode, lcBadProg, lnLineNum
Local lcErrMsg, lnMsgBox
Clear
Aerror(lcValues)

If Type('oApp.P_error_origination') = 'C'
    lcFormName = oApp.P_error_origination
Else
    lcFormName = 'Unknown'
Endif
*** routine to display errors
lcErrMsg = "Program Error Message Number: " + Ltrim(Str(lcValues(1))) ;
    + Chr(13)+ Chr(13) + "Error message: " + lcValues(2) ;
    + Chr(13)+ Chr(13) + "Code with error: " + Iif(!Isnull(lcValues(3)),lcValues(3),'??') ;
    + Chr(13)+ Chr(13) + "Line Number of Error: " + Ltrim(Str(Error()))

lcErrMsg1 =lcErrMsg  + Chr(13)+ Chr(13) + Chr(13)+ Chr(13) + 'Do you want to Set Step On?'

If _vfp.StartMode = 0
    lnMsgBox = Messagebox(lcErrMsg1,20+4096,"Program Errors -- "+lcFormName)


    If lnMsgBox = 6  && Cancel
        Set Step On
    Endif

ELSE

	***
    Messagebox(lcErrMsg,64+4096,"Program Errors -- "+lcFormName,8000)
	CLEAR EVENTS
	
Endif

ENDPROC
PROCEDURE m_get_authorization
Lparameters lcdatatype

Local lcfile, lctempfolder, lcinfo, lcmacro, lnhandle


lcmaster = This.p_data_location+'masterdbc\masterdbc.dbc'
lcuserid =  Alltrim(This.p_computer_userid)   &&& 'haugenr'
*MESSAGEBOX('4'+lcuserid)
*MESSAGEBOX('1')
Open Database &lcmaster Shared
Set Database To &lcmaster
Use Users In 0 Again Shared
Select security ,pk, fk_office, namefull, Namefirst, NameLast From Users Where Userid = lcuserid Into Array mysec

If _Tally # 0
	This.p_application_security_level = mysec(1)
	this.p_fk_user = mysec(2)
	this.p_fk_office = mySec(3)
	this.p_application_user_fullname = mySec(4)
	this.p_username_firstlast = ALLTRIM(mySec(5))+" "+ALLTRIM(mySec(6))
	

ELSE
	this.p_application_user_fullname = 'Development'	
	this.p_username_firstlast = "Development"
	*this.p_dbc_identy = UPPER(ALLTRIM('Development'))
ENDIF

	*** get database identity
try	
		SELECT identity FROM masterdbc!identity WHERE pk = 1 INTO CURSOR myIdentity

		this.p_dbc_identy = UPPER(ALLTRIM( myIdentity.identity))
CATCH
	this.p_dbc_identy = ''
endtry		
		USE IN SELECT('myIdentity')
IF this.p_fk_user = 2  &&& testing only
	this.p_message_timer_interval = 10000  && set to 10 seconds for testing
ENDIF

Use In Select('users')
Close Databases

*!*	IF DBUSED('masterdbc')
*!*	MESSAGEBOX('2')
*!*	ENDIF



Return .F.

*************************
* Code to Determine where data is located

*************************
With This
	*** either lcDataType is Live or Local
	Do Case
		Case Empty(lcdatatype)  && then assume Local unless different info in EMPOWIR.TXT in temp folder
			lctempfolder = Sys(2023)
			lcfile = lctempfolder + '\'+.p_application_running+ '.txt'
			If File(lcfile)  &&& check to see if file exists in temp folder
				lnhandle = Fopen(lcfile)
				If lnhandle > 0   &&& valid file
					lcinfo = Fgets(lnhandle)
					.p_data_path_drive = Upper(Left(Alltrim(lcinfo),1))
					.p_data_path_full = Upper(Alltrim(lcinfo))
					.p_mode = Fgets(lnhandle)
					=Fclose(lnhandle)
				Else
					If .p_default_location = 'LOCAL'
						.p_data_path_drive = 'C'  &&& default
						.p_data_path_full = 'C:\EMR_POS'
						.p_mode = 'LOCAL'
					Else
						.p_data_path_drive = 'M'  &&& default
						.p_data_path_full = 'M:\EMR_POS'
						.p_mode = 'LIVE'
					Endif
				Endif
			Else
				If .p_default_location = 'LOCAL'
					.p_data_path_drive = 'C'  &&& default
					.p_data_path_full = 'C:\EMR_POS'
					.p_mode = 'LOCAL'
				Else
					.p_data_path_drive = 'M'  &&& default
					.p_data_path_full = 'M:\EMR_POS'
					.p_mode = 'LIVE'
				Endif
			Endif
		Case Val(lcdatatype) = 1	Or Upper(Alltrim(lcdatatype)) = 'LOCAL'  &&& local only
			.p_data_path_drive = 'C'  &&& default
			.p_data_path_full = 'C:\EMR_POS'
			.p_mode = 'LOCAL'
		Case Val(lcdatatype) = 2	Or Upper(Alltrim(lcdatatype)) = 'LIVE' &&& live only
			.p_data_path_drive = 'M'  &&& default
			.p_data_path_full = 'M:\EMR_POS'
			.p_mode = 'LIVE'
		Case Val(lcdatatype) = 3 	&&& Both default to local
			.p_data_path_drive = 'C'  &&& default
			.p_data_path_full = 'C:\EMR_POS'
			.p_mode = ' LOCAL'

		Case Val(lcdatatype) = 4	&&& Both Default to Live
			.p_data_path_drive = 'M'  &&& default
			.p_data_path_full = 'M:\EMR_POS'
			.p_mode = 'LIVE'
		Otherwise
			Messagebox('Unknown Parameter passed',64+4096,'Parameter error',3000)
	Endcase

	*!*	Else		&&& we already know the type of data
	*!*		Messagebox('Data type sent in as a parameter - Under Construction')
	*!*		.p_abort_program = .T.
	*!*		Return .F.

	*!*	Endif


	Do Case
		Case Alltrim(Upper(.p_mode)) = 'LIVE' Or .p_data_path_drive = 'M'  &&& force the issue
			*** check to make sure the folder exists and we can get access
			.p_mode = 'LIVE'
			lcmacro = '"'+.p_data_path_full+'"'
			lcmacro1 = '"'+.p_data_path_full+'\accesscontrol\accesscontrol.dbc"'
			If Directory(&lcmacro) And File(&lcmacro1)
				lcmacro = 'Open Data "'+.p_data_path_full+'\accesscontrol\accesscontrol" Shared'
				&lcmacro
				If Upper(Alltrim(Juststem(Dbc()))) != 'ACCESSCONTROL'
					.p_abort_program = .T.
					Return .F.
				Endif

			Else  && could not find folder
				Messagebox('Unable to authorize you to run program!',64+4096,'Unauthorized Access Attempted!',4000)
				.p_abort_program = .T.
				Return .F.
			Endif
		Case Alltrim(Upper(.p_mode)) = 'LOCAL' Or .p_data_path_drive = 'C'

			*** check to make sure the folder exists and we can get access
			.p_mode = 'LOCAL'
			lcmacro = '"'+.p_data_path_full+'"'
			lcmacro1 = '"'+.p_data_path_full+'\accesscontrol\accesscontrol.dbc"'
			If Directory(&lcmacro) And File(&lcmacro1)
				lcmacro = 'Open Data "'+.p_data_path_full+'\accesscontrol\accesscontrol" Shared'
				&lcmacro
				If Upper(Alltrim(Juststem(Dbc()))) != 'ACCESSCONTROL'
					.p_abort_program = .T.
					Return .F.
				Endif

			Else  && could not find folder
				Messagebox('Unable to authorize you to run program!',64+4096,'Unauthorized Access Attempted!',4000)
				.p_abort_program = .T.
				Return .F.
			Endif
		Otherwise

	Endcase


Endwith


ENDPROC
PROCEDURE m_get_date_from_week_day
Lparameters lnFk_Wk, lnFk_day

If Empty(lnFk_Wk)
	ldReturnDate = {}
Else
	If This.p_first_day_of_week = 1 &&& Sunday is 1st day of week
		ldReturnDate = {^2006-01-01} + (lnFk_Wk-262)*7 + (lnFk_day -1)
	Else
		ldReturnDate = {^2001-01-01} + (lnFk_Wk-1)*7 + (lnFk_day -1)
	Endif

Endif

Return ldReturnDate

ENDPROC
PROCEDURE m_get_datetime_from_week_day_ts
Lparameters lnFk_Wk, lnFk_day, lnfk_Ts

LOCAL ltReturnDate, ldDate, lcTime

If Empty(lnFk_Wk)
	ldDate = CTOD("  /  /   ")
Else
	If This.p_first_day_of_week = 1 &&& Sunday is 1st day of week
		ldDate = {^2006-01-01} + (lnFk_Wk-262)*7 + (lnFk_day -1)
	Else
		ldDate = {^2001-01-01} + (lnFk_Wk-1)*7 + (lnFk_day -1)
	Endif

Endif

lcTime = THIS.m_get_time_from_timeslot(lnfk_Ts)

ltReturnDate = CTOT(DTOC(ldDate)+" "+lcTime)

Return ltReturnDate

ENDPROC
PROCEDURE m_get_first_day_of_week
*!* Program:
*!* Author: Ron Haugen
*!* Date: 11/10/06 06:49:36 AM
*!* Copyright: Companions and Homemakers
*!* Description: Return Monday of Week
*!* Revision Information:
Lparameters ldDateOfWeek

ldFirstDayOfWeek = ldDateOfWeek - (Dow(ldDateOfWeek,this.p_first_day_of_week)-1)

Return ldFirstDayOfWeek

ENDPROC
PROCEDURE m_get_monday_of_week
*!* Program:
*!* Author: Ron Haugen
*!* Date: 11/10/06 06:49:36 AM
*!* Copyright: Companions and Homemakers
*!* Description: Return Monday of Week
*!* Revision Information:
Lparameters ldDateOfWeek

ldMondayOfWeek = ldDateOfWeek - (Dow(ldDateOfWeek,oapp.p_first_day_of_week)-1)

Return ldMondayOfWeek

ENDPROC
PROCEDURE m_get_time_from_timeslot
LPARAMETERS pfk_Ts

* return the time as a character string from a passed in timeslot

LOCAL lcTime
lcTime = "12:00 AM"

DO CASE
	CASE pfk_Ts =1	
		lcTime = "12:00 AM"
	CASE pfk_Ts =2	
		lcTime = "12:30 AM"
	CASE pfk_Ts =3	
		lcTime =  "1:00 AM"
	CASE pfk_Ts =4	
		lcTime =  "1:30 AM"
	CASE pfk_Ts =5	
		lcTime =  "2:00 AM"
	CASE pfk_Ts =6	
		lcTime = "2:30 AM"
	CASE pfk_Ts =7	
		lcTime = "3:00 AM"
	CASE pfk_Ts =8	
		lcTime = "3:30 AM"
	CASE pfk_Ts =9	
		lcTime = "4:00 AM"
	CASE pfk_Ts =10	
		lcTime = "4:30 AM"
	CASE pfk_Ts =11	
		lcTime = "5:00 AM"
	CASE pfk_Ts =12	
		lcTime = "5:30 AM"
	CASE pfk_Ts =13	
		lcTime = "6:00 AM"
	CASE pfk_Ts =14	
		lcTime = "6:30 AM"
	CASE pfk_Ts =15	
		lcTime = "7:00 AM"
	CASE pfk_Ts =16	
		lcTime = "7:30 AM"
	CASE pfk_Ts =17	
		lcTime = "8:00 AM"
	CASE pfk_Ts =18	
		lcTime = "8:30 AM"
	CASE pfk_Ts =19	
		lcTime = "9:00 AM"
	CASE pfk_Ts =20	
		lcTime = "9:30 AM"
	CASE pfk_Ts =21	
		lcTime = "10:00 AM"
	CASE pfk_Ts =22	
		lcTime = "10:30 AM"
	CASE pfk_Ts =23	
		lcTime = "11:00 AM"
	CASE pfk_Ts =24	
		lcTime = "11:30 AM"
	CASE pfk_Ts =25	
		lcTime = "12:00 PM"
	CASE pfk_Ts =26	
		lcTime = "12:30 PM"
	CASE pfk_Ts =27	
		lcTime = "1:00 PM"
	CASE pfk_Ts =28	
		lcTime = "1:30 PM"
	CASE pfk_Ts =29	
		lcTime = "2:00 PM"
	CASE pfk_Ts =30	
		lcTime = "2:30 PM"
	CASE pfk_Ts =31	
		lcTime = "3:00 PM"
	CASE pfk_Ts =32	
		lcTime = "3:30 PM"
	CASE pfk_Ts =33	
		lcTime = "4:00 PM"
	CASE pfk_Ts =34	
		lcTime = "4:30 PM"
	CASE pfk_Ts =35	
		lcTime = "5:00 PM"
	CASE pfk_Ts =36	
		lcTime = "5:30 PM"
	CASE pfk_Ts =37	
		lcTime = "6:00 PM"
	CASE pfk_Ts =38	
		lcTime = "6:30 PM"
	CASE pfk_Ts =39	
		lcTime = "7:00 PM"
	CASE pfk_Ts =40	
		lcTime = "7:30 PM"
	CASE pfk_Ts =41	
		lcTime = "8:00 PM"
	CASE pfk_Ts =42	
		lcTime = "8:30 PM"
	CASE pfk_Ts =43	
		lcTime = "9:00 PM"
	CASE pfk_Ts =44	
		lcTime = "9:30 PM"
	CASE pfk_Ts =45	
		lcTime = "10:00 PM"
	CASE pfk_Ts =46	
		lcTime = "10:30 PM"
	CASE pfk_Ts =47	
		lcTime = "11:00 PM"
	CASE pfk_Ts =48	
		lcTime = "11:30 PM"
	CASE pfk_Ts =49	
		lcTime = "12:00 AM"
	CASE pfk_Ts =50	
		lcTime = "12:00 AM"

ENDCASE




RETURN lcTime

ENDPROC
PROCEDURE m_get_week_number
*!* Program:
*!* Author: Ron Haugen
*!* Date: 11/06/06 09:01:08 AM
*!* Copyright: Companions and Homemakers
*!* Description:  calculate the week number based on 01/01/2001 as starting week
*!* Revision Information:

Lparameters ldDateParameter

IF TYPE('ldDateParameter') = 'T'
	ldDateParameter = TTOD(ldDateParameter)
ENDIF


If Type('ldDateParameter') # 'D'
	ldReTurn = {}
Else
	If !Empty(ldDateParameter)
		IF This.p_first_day_of_week = 1  && Sunday
			*** we are changing first day of week from Monday to Sunday
			ldReTurn = Int((ldDateParameter - {^2006-01-01})/7) +262
		Else
			ldReTurn = Int((ldDateParameter - {^2001-01-01})/7) +1

		Endif

	Else
		ldReTurn = 0
	Endif

Endif

Return ldReTurn

ENDPROC
PROCEDURE m_killprocess
Lparameters tcCaption
Local lnhWnd, ;
	llReturn, ;
	lnProcessID, ;
	lnHandle

* Declare the Win32API functions we need.

#Define WM_DESTROY 0x0002
Declare Integer FindWindow In Win32API ;
	string @cClassName, String @cWindowName
Declare Integer SendMessage In Win32API ;
	integer HWnd, Integer uMsg, Integer wParam, Integer Lparam
Declare Sleep In Win32API ;
	integer nMilliseconds
Declare Integer GetWindowThreadProcessId In Win32API ;
	integer HWnd, Integer @lpdwProcessId
Declare Integer OpenProcess In Win32API ;
	integer dwDesiredAccess, Integer bInheritHandle, Integer dwProcessID
Declare Integer TerminateProcess In Win32API ;
	integer hProcess, Integer uExitCode

* Get a handle to the window by its caption.

lnhWnd   = FindWindow(0, tcCaption)
llReturn = lnhWnd = 0

* If we found the window, send a "destroy" message to it, then wait for it to
* be gone. If it didn't, let's use the big hammer: we'll terminate its process.

If Not llReturn
	SendMessage(lnhWnd, WM_DESTROY, 0, 0)
	llReturn = oapp.m_WaitForAppTermination(tcCaption)
	If Not llReturn
		lnProcessID = 0
		GetWindowThreadProcessId(lnhWnd, @lnProcessID)
		lnHandle = OpenProcess(1, 1, lnProcessID)
		llReturn = TerminateProcess(lnHandle, 0) > 0
	Endif Not llReturn
Endif Not llReturn
Return llReturn
ENDPROC
PROCEDURE m_my_errorhandler
************************
*Procedure ErrorHandler (tnErrorNo, tcMessage, tcErrorLine, tcModule, tnErrorLineNo)
Lparameters tnErrorNo, tcMessage, tcErrorLine, tcModule, tnErrorLineNo
************************
*!* Routine slightly modified from the one shown in


lcComment =	'Error Number:   '+Alltrim(Str(tnErrorNo))+Chr(13)+;
	'Error:   '+tcMessage+Chr(13)+;
	'Line:    '+tcErrorLine+Chr(13)+;
	'Module:  '+tcModule+Chr(13)+;
	'Line No: '+Alltrim(Str(tnErrorLineNo))+Chr(13)+Chr(13)+;
	'time/User: '+Ttoc(Datetime())+'......'+ Alltrim(This.p_application_user_fullname)+Chr(13)+;
	'computer: '+Alltrim(Sys(0))+'...Application: '+oapp.p_application_name


Messagebox( 'Error Routine .........................................................................'+Chr(13)+Chr(13)+Chr(13)+lcComment+Chr(13)+Chr(13)+'Program will abort',0+4096,'Error Message, Program Abort!')




Try

	lcDBC = Alltrim(oapp.p_data_location) +'bugs\bugs.dbc'
	Open Database (lcDBC) Shared
	Set Database To (lcDBC)
	lcversionInformation = '...(unknown)'
	If !Empty(oapp.p_application_name)
		If File('c:\ch_exe\'+Alltrim(oapp.p_application_name)+'.exe')
			If Agetfileversion(aCver,'c:\ch_exe\'+Alltrim(oapp.p_application_name)+'.exe') > 0 && we have version for C:
				lcversionInformation = Alltrim(aCver(4))
			Else
				If Agetfileversion(aCver,'c:\C_AND_H\ch_exe\'+Alltrim(oapp.p_application_name)+'.exe') > 0
					lcversionInformation = Alltrim(aCver(4))
				Else
					lcversionInformation = '...(unknown)'
				Endif

			Endif



		Else

			If Agetfileversion(aCver,'c:\ch_exe\'+Alltrim(oapp.p_application_name)+'.exe') > 0
				lcversionInformation = Alltrim(aCver(4))
			Else
				lcversionInformation = '...(unknown)'
			Endif




		Endif

	Endif


	lcType = 'CV.('+Alltrim(lcversionInformation)+')'
	lcUser =   This.p_application_user_fullname
	lcStatus = 'OPEN'
	lcApplication = Alltrim(oapp.p_application_name)+'.('+lcversionInformation+')'
	Insert Into bugs!bugs ;
		(Date,Type,User,Summary,Comment,Status, formname) ;
		VALUES ;
		(Datetime(),lcType,lcUser,'Program Error',lcComment,lcStatus,lcApplication)
Catch

Endtry


If oapp.p_application_security_level = 0 OR _vfp.StartMode = 0
	Set Step On

Else

	If Type('Thisform') = 'O'
		Thisform.Release

	Endif


	Clear Events


	Quit

Endif



ENDPROC
PROCEDURE m_my_killprocess
********************************
*Function KillProcess
*==============================================================================
* Program:			KillProcess
* Purpose:			Terminate the specified application
* Author:			Doug Hennig
* Copyright:		(c) 2001 Stonefield Systems Group Inc.
* Last revision:	02/02/2001
* Parameters:		tcCaption - the caption for the application to terminate
* Returns:			.T. if it succeeded
* Environment in:	none
* Environment out:	if successful, the application has been terminated
*==============================================================================
RETURN .f.


Lparameters tcCaption
Local lnhWnd, ;
	llReturn, ;
	lnProcessID, ;
	lnHandle

* Declare the Win32API functions we need.

#Define WM_DESTROY 0x0002
Declare Integer FindWindow In Win32API ;
	string @cClassName, String @cWindowName
Declare Integer SendMessage In Win32API ;
	integer HWnd, Integer uMsg, Integer wParam, Integer Lparam
Declare Sleep In Win32API ;
	integer nMilliseconds
Declare Integer GetWindowThreadProcessId In Win32API ;
	integer HWnd, Integer @lpdwProcessId
Declare Integer OpenProcess In Win32API ;
	integer dwDesiredAccess, Integer bInheritHandle, Integer dwProcessID
Declare Integer TerminateProcess In Win32API ;
	integer hProcess, Integer uExitCode

* Get a handle to the window by its caption.

lnhWnd   = FindWindow(0, tcCaption)
llReturn = lnhWnd = 0

* If we found the window, send a "destroy" message to it, then wait for it to
* be gone. If it didn't, let's use the big hammer: we'll terminate its process.

If Not llReturn
	SendMessage(lnhWnd, WM_DESTROY, 0, 0)
	llReturn = oapp.m_WaitForAppTermination(tcCaption)
	If Not llReturn
		lnProcessID = 0
		GetWindowThreadProcessId(lnhWnd, @lnProcessID)
		lnHandle = OpenProcess(1, 1, lnProcessID)
		llReturn = TerminateProcess(lnHandle, 0) > 0
	Endif Not llReturn
Endif Not llReturn
Return llReturn
ENDPROC
PROCEDURE m_my_waitforapptermination
********************************
*Function WaitForAppTermination
********************************
RETURN .f.

Lparameters tcCaption
Local lnCounter, llReturn
m.lnCounter = 0
m.llReturn  = .F.
Do While ! m.llReturn And lnCounter < 5
	Sleep(1000)
	m.lnCounter = lnCounter + 1
	m.llReturn  = FindWindow(0, m.tcCaption) = 0
Enddo
Return m.llReturn
ENDPROC
PROCEDURE m_reduce_memory
* reduce memory
RETURN .f.
Declare Integer SetProcessWorkingSetSize In kernel32 As SetProcessWorkingSetSize  ;
	Integer hProcess , ;
	Integer dwMinimumWorkingSetSize , ;
	Integer dwMaximumWorkingSetSize
	
Declare Integer GetCurrentProcess In kernel32 As GetCurrentProcess

nProc = GetCurrentProcess()

bb = SetProcessWorkingSetSize(nProc,-1,-1)
ENDPROC
PROCEDURE m_sticky_note
lcSafety = SET("Safety")

SET SAFETY off


	lcUserID = Strtran(Strtran(Strtran(oapp.p_application_user_fullname,' ',''),'.',''),',','_')
	lcWordPad = 'WordPad_'+lcUserID

	lctempPath = Sys(2023)

	lcWordPadFileName = lctempPath+'\ch_data\'+lcWordPad+'.rtf'
	lcWordPadFileName_pre = lctempPath+'\ch_data\'+lcWordPad+'.txt'

	If !File(lcWordPadFileName)

		TEXT TO myRTF noshow

{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\cf1\f0\fs20\par\cf1  Hope Wordpad for Your.Name\par
\par
------------------------------------------------------------------\cf1\par
}

		ENDTEXT


		myRTF =  Strtran(myRTF , "Your.Name",Alltrim(oapp.p_application_user_fullname))

		Strtofile(myRTF,lcWordPadFileName)

	Endif


	lcWordPadExistingFile = Filetostr(lcWordPadFileName)

*** locate fs20
	lcFirstChunk = LEFT(lcWordPadExistingFile,AT('\fs20',lcWordPadExistingFile,1)+4)
	lcSecondChunk = SUBSTR(lcWordPadExistingFile,AT('\fs20',lcWordPadExistingFile,1)+5)


	If File(lcWordPadFileName_pre)
		lcPreFile = Filetostr(lcWordPadFileName_pre)
	Else
		lcPreFile = ''

	Endif
	lcWordPadExistingFile = lcFirstChunk + lcPreFile + lcSecondChunk
	
	
	Strtofile(lcWordPadExistingFile,lcWordPadFileName)

	Try
		Declare Integer ShellExecute ;
			IN SHELL32.Dll ;
			INTEGER nWinHandle,;
			STRING cOperation,;
			STRING cFileName,;
			STRING cParameters,;
			STRING cDirectory,;
			INTEGER nShowWindow

		=ShellExecute(0,"open","wordpad.exe",lcWordPadFileName,"",1)
		lSuccess = .T.
	Catch
		lSuccess = .F.
	Endtry

	If lSuccess And !Empty(lcPreFile)
		Strtofile('',lcWordPadFileName_pre)
	Endif

SET SAFETY &lcSafety
ENDPROC
PROCEDURE m_strip_badcharacters
Lparameters lcMemoString

*** pass in the string
** return the stripped string

If !Empty(lcMemoString)
	lcBadChar = ""
	For i = 0 To 32
		If ( ! Inlist( i, 9, 10, 13 ) )
			lcBadChar = lcBadChar + Chr(i)
		Endif
	Endfor

	lcReturnSTring = Chrtran(lcMemoString,lcBadChar,Space(Len(lcBadChar)))
Else
	lcReturnSTring = ''
Endif

Return lcReturnSTring

ENDPROC
PROCEDURE m_waitforapptermination
********************************
*Function WaitForAppTermination
********************************
Lparameters tcCaption
Local lnCounter, llReturn
m.lnCounter = 0
m.llReturn  = .F.
Do While ! m.llReturn And lnCounter < 5
	Sleep(1000)
	m.lnCounter = lnCounter + 1
	m.llReturn  = FindWindow(0, m.tcCaption) = 0
Enddo
Return m.llReturn
ENDPROC
PROCEDURE old_m_error_message
**LPARAMETER lcFormName  &&lnErrNum, lcErrMsg, lcBadCode, lcBadProg, lnLineNum
Local lcErrMsg, lnMsgBox
Clear
Aerror(lcValues)

If Type('oApp.P_error_origination') = 'C'
    lcFormName = oApp.P_error_origination
Else
    lcFormName = 'Unknown'
Endif
*** routine to display errors
lcErrMsg = "Program Error Message Number: " + Ltrim(Str(lcValues(1))) ;
    + Chr(13)+ Chr(13) + "Error message: " + lcValues(2) ;
    + Chr(13)+ Chr(13) + "Code with error: " + Iif(!Isnull(lcValues(3)),lcValues(3),'??') ;
    + Chr(13)+ Chr(13) + "Line Number of Error: " + Ltrim(Str(Error()))

lcErrMsg1 =lcErrMsg  + Chr(13)+ Chr(13) + Chr(13)+ Chr(13) + 'Do you want to Set Step On?'

If _vfp.StartMode = 0
    lnMsgBox = Messagebox(lcErrMsg1,20+4096,"Program Errors -- "+lcFormName)


    If lnMsgBox = 6  && Cancel
        Set Step On
    Endif

Else
    Messagebox(lcErrMsg,64+4096,"Program Errors -- "+lcFormName,8000)

Endif

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
p_default_path Default Path
p_startup_directory Start Up Directory
p_startup_setpath Startup Set Path
p_computer_id computer ID
p_computer_userid Computer UserID
p_computer_network_id Network ID
p_application_name application name
p_data_type LIVE or TEST data
p_development_mode if .T. then we are running in Development Mode
p_unprintableletters Property that stores unprintable charachters, issue with XMLtoCursor
p_active_control
p_active_form Property to retain the current active form
p_database_tracking flag if we should be tracking INSERTS, UPDATE and DELETES
p_error_origination Where the error originated from
p_data_location
p_schedule_start_date
p_schedule_type default is -1, 1 = Field Staff Schedule type 2 = Client Schedule Type
p_schedule_need_caption
p_schedule_ongoing flag used to determine if it is a one time file or ongoing
p_skip_tracking
p_skip_global_pk
p_fk_employee
p_employee_name_full
p_drag_flag
p_payrate
p_fk_client
p_application_security_level
p_payor_history_authorization days for displaying ended authorizations
p_payor_history stores number days to display ended payor records
p_schedule_weeks_look_ahead
p_application_user_fullname
p_audit_history
p_fk_user
p_message_timer_interval
p_fk_office
p_dbc_identy
p_data_location_bit
p_schedule_weeks_look_behind
p_first_day_of_week 1 = Sunday, 2 = Monday
p_auto_create_auth flag to auto create authorizations for Priv. Service orders
p_date_selected
p_runpayroll .F. if user can run payroll, .T. if they can't.  Set by method m_Checkpayroll
p_training This is .T. if we are running HOPE in training mode, .F. if we are not.  It is set by parameter when this menu program is initiated.
p_runbilling .T., if current user cannot run billing, .F. if they CAN.
p_1500 If .T., user can't run 1500 rebill screens for Accpac, if .F. the user can
p_username_firstlast
p_upaycont .T. if user has access to payrate changing, etc.
p_payreports
p_oig
p_report_location
*m_set_data_path set the data path for application
*m_get_authorization method that determines the users authorization to run this progrram
*m_error_message Error Handler
^p_running_forms[1,0] array holding all of the running forms
*m_is_dbc_open 
*m_get_week_number 
*m_get_monday_of_week 
*m_get_date_from_week_day 
*m_does_week_day_fall_in_startd8_endd8 
^p_print_array[1,0] 
*m_strip_badcharacters 
*m_audit_history 
*m_my_errorhandler 
*m_my_killprocess 
*m_my_waitforapptermination 
*old_m_error_message 
*m_killprocess 
*m_waitforapptermination 
^p_form_list[1,0] 
*m_get_first_day_of_week 
*m_sticky_note 
*m_clear_sticky_note 
*m_reduce_memory 
*m_10week_day 
*m_checkpayroll Looks at the lookup table to see if the user can run payroll.  Sets property p_RunPayoll
*m_checkbilling See if Timerecords user can run billing
*calc_age Given a date, calculates the age of a person and returns it as a number
*m_checkpayrate sees if user has master level payrate authorization
*m_get_datetime_from_week_day_ts returns a date time value from a schedule week number, day number and fk_Ts
*m_get_time_from_timeslot returns the time as a character string from the passed in schedule timeslot
*m_checkoig 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] oapp

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _23Y0MA8TL
[CLASS] _cus
[CLASSLOC] chbase.vcx
[BASECLASS] custom
[OBJNAME] objreport
[START PROPERTIES]
p_fk_office = 0
p_start_d8 = 0
p_end_d8 = 0
Name = "objreport"
[END PROPERTIES]
[START METHODS]
PROCEDURE m_age_report
Lparameters lcparam1, lcparam2, lnOption

**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF

lcTable = ALLTRIM(myReportOptions.lparam1)

Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif

ldStart = (MONTH(This.p_start_d8) * 1000) + DAY(This.p_start_D8)
ldend = (MONTH(this.p_end_d8) * 1000) + DAY(This.p_end_D8)


lnfk_office = This.p_fk_office

IF lcParam1="CLIENTS"

	If !Empty(lnfk_office)
		lcwhereclause = ' and status_cid = 2 and '+lcTable+'.fk_office = '+Alltrim(Str(lnfk_office))
	Else
		lcwhereclause = 'and status_cid = 2 '
	Endif

ELSE

	If !Empty(lnfk_office)
		lcwhereclause = ' and status_eid = 2 and  '+lcTable+'.fk_office = '+Alltrim(Str(lnfk_office))
	Else
		lcwhereclause = 'and status_eid = 2 '
	Endif

ENDIF

SELECT &lcTable..name_full, ;
		&lcTable..dob, ;
		&lcTable..fk_office, ;
		myoffices.office As office, ;
		CTOD(right('00'+ALLTRIM(STR(MONTH(dob))),2)+'/'+RIGHT('00'+ALLTRIM(STR(DAY(dob))),2) +'/'+ALLTRIM(STR(YEAR(DATE()))) ) as birthdate ,;
		YEAR(CTOD(right('00'+ALLTRIM(STR(MONTH(dob))),2)+'/'+RIGHT('00'+ALLTRIM(STR(DAY(dob))),2) +'/'+ALLTRIM(STR(YEAR(DATE())))))-YEAR(dob) as age ;
		FROM &lcTable ;
		inner Join myoffices ;
		ON &lcTable..fk_office = myoffices.fk_office ;
		WHERE (MONTH(dob) * 1000) + DAY(dob) => ldstart AND (MONTH(dob) * 1000) + DAY(dob) <= ldend ;
		&lcWhereclause ;
		ORDER BY office, birthdate ;
		INTO CURSOR myReportCursor


Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule
lcReportName = 'rptBirthday'

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0		

ELSE
	MESSAGEBOX('No Birthdays Found.',0+4096,'No Birthdays',3000)
ENDIF
ENDPROC
PROCEDURE m_agency_auths
Lparameters lcparam1, lcParam2, lnOption

*lcparam1 = .t. >>>> print all
*lcparam1 = .f. >>>> print only questionable ones
**lnoption 0 Sort by Office, Agency, Client
**		   1 Sort by Office, Client
**		   2 Authorizations to Expire in date range
ldStart = This.p_start_d8
ldend = This.p_end_d8




lnfk_office = This.p_fk_office



If !Empty(lnfk_office)
	lcwhereclause = ' and fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif







*** possible payor information needing checking


Select Clients.name_full,;
	payor.pk as fk_payor, ;
	payor.id as payor_id, ;
	payor.start_d8 as payor_startd8, ;
	payor.end_d8 as payor_endd8,;
	Payor.ver_userid as payor_ver_userid,;
	Payor.expired as payor_expired,;
	Payor.rate as payor_rate, ;
	Payor.duration as payor_duration, ;
	auth.pk as fk_auth, ;
	auth.start_d8 as auth_start_d8, ;
	auth.end_d8 as auth_end_d8, ;
	auth.rate as auth_rate, ;
	auth.period as auth_period, ;
	auth.visit_hours, ;
	auth.visit_times, ;
	auth.visit_period, ;
	auth.visit_total, ;
	auth.expired as auth_expired, ;
	auth.ver_userid as auth_ver_userid, ;
	clients.fk_office, ;
	myOffices.office, ;
	myServices.service, ;
	.F. As lflag ;
	FROM ;
	client!Clients ;
	INNER Join client!Payor ON  Clients.pk = Payor.fk_client;
	INNER Join client!auth ON   auth.fk_payor = payor.pk ;
	INNER Join myOffices On myOffices.fk_office = Clients.fk_office ;
	INNER Join myServices On myServices.fk_service = Payor.fk_service ;
	WHERE  Clients.status_cid < 3 ;
		AND !EMPTY(payor.fk_client) ;
	AND  Payor.Id != ( "PRIV" ) ;
	AND  (  Empty(Payor.end_d8)  Or  Payor.end_d8 > Date() ) ;
	INTO Cursor myreportcursor1 Readwrite




Do Case
	Case lnOption = 0 &&& order by office, agency, client (All)

		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,payor_id,name_full,fk_payor,auth_start_d8 desc '
		
	Case lnOption = 1 && order by office, client (All)
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office, name_full,payor_id, fk_payor,auth_start_d8 desc '
	
	Case lnOption = 2 &&& order by office, agency, client (Verified)

		Update myreportcursor1 Set lflag = .T. WHERE !EMPTY(auth_expired)
		lcOrderMacro = ' office,payor_id,name_full,fk_payor,auth_start_d8 desc '
		
	Case lnOption = 3 && order by office, client (Verified)
		Update myreportcursor1 Set lflag = .T.  WHERE !EMPTY(auth_expired)
		lcOrderMacro = ' office, name_full,payor_id, fk_payor,auth_start_d8 desc '
	Case lnOption = 4 &&& order by office, agency, client (Not Verified)

		Update myreportcursor1 Set lflag = .T.  WHERE EMPTY(auth_expired)
		lcOrderMacro = ' office,payor_id,name_full,fk_payor,auth_start_d8 desc '
		
	Case lnOption = 5 && order by office, client (Not Verified)
		Update myreportcursor1 Set lflag = .T.  WHERE EMPTY(auth_expired)
		lcOrderMacro = ' office, name_full,payor_id, fk_payor,auth_start_d8 desc '
	
	
	
	Otherwise wise
		lnOption = 0
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,payor_id,name_full,fk_payor,auth_start_d8 desc '
Endcase

Alines(aa,myReportOptions.Comment,1)

oApp.p_print_array(3) = 'Option '+aa(lnOption+2)




Select  * From myreportcursor1 ;
	WHERE lflag = .T. &lcwhereclause ;
	ORDER By &lcOrderMacro ;
	INTO Cursor myreportcursor Readwrite




Select myreportcursor

*modi report rptAgency_auths

If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh

	lcReportName = ALLTRIM(myReportOptions.rptName) &&
	** modi report rptAgency_auths

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif





ENDPROC
PROCEDURE m_billing_verify
Lparameters lcparam1, lcParam2, lnOption

SET CENTURY off

**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ELSE
	DO CASE
		CASE lcParam1 = '2' AND lcParam2 = 'FALSE'
			lcWhereClause =  ' and BITTEST(payor.bit_service,3) = .F. and payor.type = 2 '	
		CASE lcParam1 = '2' AND lcParam2 = 'TRUE'
			lcWhereClause =  ' and BITTEST(payor.bit_service,3) = .T. and payor.type = 2 '	
		CASE lcParam1 = '1'
			lcWhereClause =  ' and payor.type = 1 '	
	ENDCASE
	
	
	
ENDIF

Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif

ldEndD8 = This.p_end_d8

ldStartD8 = This.p_start_d8

lnfk_office = This.p_fk_office

lcwhereclause =lcWhereClause+ ' and payor.start_d8 <= CTOD("'+DTOC(ldStartD8)+'")' +;
				' and (EMPTY(payor.end_d8) or CTOD("'+DTOC(ldEndD8)+'") <= payor.end_d8)'
				
*lcwhereclause = ' and (!EMPTY(auth.hold_start_d8) and (auth.hold_start_d8 <= This.p_start_d8 and EMPTY(auth.hold_end_d8))) ' &&&&&&+;
*					' or (!EMPTY(auth.hold_start_d8) and (auth.hold_start_d8 <= This.p_start_d8 and auth.hold_end_d8 > this.p_end_d8))'

If !Empty(lnfk_office)
	lcwhereclause = lcwhereclause+ ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = lcwhereclause+''
Endif




Select ;
	clients.pk as fk_client, ;
	clients.name_full As name_full_client, ;
	clients.fk_office As fk_office_client, ;
	myoffices.office As client_office, ;
	payor.fk_service, ;
	payor.id as payor_id ,;
	payor.name as payor_name, ;
	payor.type, ;
	payor.start_d8, ;
	payor.end_d8, ;
	payor.orig_startd8, ;
	payor.rate, ;
	payor.duration, ;
	payor.client_ident, ;
	payor.fund_code, ;
	payor.policy_code, ;
	payor.billing_id, ;
	payor.emsmedicaid, ;
	payor.diagnosis_code, ;
	payor.bit_service, ;
	myservices.service ;
	FROM ;
		client!payor ;
	inner Join client!clients ;
	ON  payor.fk_client = clients.pk ;
	inner Join myoffices ;
	ON myoffices.fk_office = clients.fk_office ;
	inner Join myservices ;
	ON myservices.fk_service =   payor.fk_service ;
	WHERE  .t. = .t. AND !EMPTY(clients.pk) ;
	&lcwhereclause ;
	ORDER By myoffices.office,clients.name_full;
	into Cursor myreportcursor Readwrite



*** now we need to add the rest of the fields
** BITTEST(contact_bit,0)  we do not need to contact contact first
** in contact table, bittest(bit_setting,0) indicates an emergency contact






Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptAuth
lcReportName = ALLTRIM(myReportOptions.rptName) &&  'rptBillingVerify'

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0

ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF


ENDPROC
PROCEDURE m_client_list
Lparameters lcparam1, lcParam2, lnOption


*** lnOption 0 = due, 1 = completed, 2 Over due
lnfk_office = This.p_fk_office


ldStartDate = This.p_start_d8
ldEndDate = This.p_end_d8



If !Empty(lnfk_office)
	lcwhereclause = ' clients.fk_office = '+Alltrim(Str(lnfk_office)) +' and '
Else
	lcwhereclause = ''
Endif

lcWhereClause2 = ''
DO CASE
	CASE lnOption = 0 && all clients
		SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
			
	CASE lnOption = 1 && Pending
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				 clients.status_cid = 1 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 2 && Active
		SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				 clients.status_cid = 2 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 3 && On Hold
		SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				 clients.status_cid = 3;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 4 && Ended
		SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				 clients.status_cid = 4 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 5 && Active - Companion (1)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 1 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
	CASE lnOption = 6 && Active - Homemaker (2)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 2 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
	CASE lnOption = 7 && Active - Live In (3)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 3 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
	CASE lnOption = 8 && Active - Over Night (6)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 6 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
	CASE lnOption = 9 && Active - Personal Care (4)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 4 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
	CASE lnOption = 10 && Active - ALZ (7)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 7 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
	CASE lnOption = 11 && Active - Chore (5)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 5 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
	CASE lnOption = 12 && Active - CP Special (11)
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND myServices.fk_service = 11 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	
*!*		CASE lnOption = 13
*!*			RETURN .f.
*!*		CASE lnOption = 14
*!*			RETURN .f.
	CASE lnOption = 15 && Active Private
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND payor.type = 1 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 16 && Active Agency
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND payor.type = 2 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 17 && Active C & H
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND payor.type = 3 ;
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
*!*		CASE lnOption = 18
*!*		CASE lnOption = 19
	CASE lnOption = 20 && Active (Mobility) pk = 13
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 13 AND BITTEST(client_attribute.bitfield,0);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 21 && Active (End of Life Care) pk = 16
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 16 AND BITTEST(client_attribute.bitfield,0);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 22 && Certification Needed - CNA pk = 17,  bit 1
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 17 AND BITTEST(client_attribute.bitfield,1);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 23 && Certification Needed - HHA pk = 17,  bit 2
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 17 AND BITTEST(client_attribute.bitfield,2);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 24 && Certification Needed - PCA pk = 17,  bit 3
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 17 AND BITTEST(client_attribute.bitfield,3);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 25 && Certification Needed - ALZ pk = 17,  bit 4
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 17 AND BITTEST(client_attribute.bitfield,4);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 26 && Certification Needed - ABI pk = 17,  bit 5
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
		payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 17 AND BITTEST(client_attribute.bitfield,5);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 27 && Housing - Rehab Facility Pk = 1 , bit 4
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 1 AND BITTEST(client_attribute.bitfield,4);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 28 && Housing - Nursing Home Pk = 1 , bit 5
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 1 AND BITTEST(client_attribute.bitfield,5);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 29 && Housing - Assisted Living Pk = 1 , bit 8
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 1 AND BITTEST(client_attribute.bitfield,8);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
	CASE lnOption = 30 && Housing - Hospice Pk = 1 , bit 9
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 1 AND BITTEST(client_attribute.bitfield,9);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
*!*		CASE lnOption = 31
	CASE lnOption = 32 && Transportation - Use Client's Car Pk = 10, bit = 6
	SELECT ;
			myOffices.office, ;
			clients.fk_office, ;
			clients.name_full, ;
			clients.town, ;
			clients.pk as fk_client, ;
			myClientStatus.status ,;
			myServices.service, ;
			payor.id, ;
			payor.type, ;
			payor.rate, ;
			payor.start_d8, ;
			payor.end_d8, ;
			myPriority.priority, ;
			payor.expired, ;
			clients.cid ;
			FROM clients ;
			INNER JOIN payor ON payor.fk_client = clients.pk ;
			INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
			INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
			INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
			INNER JOIN client_attribute ON client_attribute.fk_person = clients.pk ;
			LEFT OUTER JOIN myPriority ON myPriority.fk_priority = clients.fk_priority ;
			WHERE &lcwhereclause ;
				((payor.start_d8 <= ldEndDate AND EMPTY(payor.end_d8) ) OR ;
				(payor.start_d8 <= ldEndDate AND payor.end_d8 => ldStartDate )) ;
				AND client_attribute.fk_needs = 10 AND BITTEST(client_attribute.bitfield,6);
			ORDER BY clients.fk_office, clients.name_full, myservices.service, payor.start_d8 ;
			INTO CURSOR myReportCursor
*!*		CASE lnOption = 33
*!*		CASE lnOption = 34
*!*		CASE lnOption = 35
	OTHERWISE
		RETURN .f.
	
	
	
ENDCASE




	









Alines(aa,myReportOptions.Comment,1)

oApp.p_print_array(3) = 'Option '+aa(lnOption+2)







Select myreportcursor

*modi report rptAgency_auths

If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh

	lcReportName = ALLTRIM(myReportOptions.rptName) &&
	** modi report rptAgency_auths

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif





ENDPROC
PROCEDURE m_email
Lparameters lcparam1, lcParam2, lnOption

***


#DEFINE olFolderContacts 10
CREATE CURSOR myReportCursor1 (Name c(40),email c(50), type I)
LOCAL oOutlook,oNameSpace,oDefaultFolder
oOutlook = CREATEOBJECT('outlook.application')
oNameSpace = oOutlook.getnamespace('MAPI')
oDefaultFolder=oNameSpace.GetDefaultFolder(olFolderContacts)
oItems = oDefaultFolder.items

FOR EACH oItem IN oItems
try
	IF 'ELDERLY' $ UPPER(oItem.email1address) OR 'CAND' $ UPPER(oItem.email1address)
		lnType = 1
	ELSE
		lnType = 2
		
	
	ENDIF
	

 INSERT INTO myReportCursor1 (name,email, type) VALUES (oItem.fullname,oItem.email1address,lntype)
 CATCH
 ENDTRY

ENDFOR

*oapp.p_print_array(1) = oapp.p_application_user_fullname+ ' Contacts'
oapp.p_print_array(2) = 'For ' +oapp.p_application_user_fullname


DO CASE
	case EMPTY(lnOption)
		SELECT * FROM myReportcursor1 ORDER BY name INTO CURSOR myReportcursor
		oapp.p_print_array(3) = 'All Contacts'
	CASE lnOption = 1
		SELECT * FROM myReportcursor1 WHERE type = 1 ORDER BY name INTO CURSOR myReportcursor
		oapp.p_print_array(3) = 'Company Contacts'
	CASE lnOption = 2
		SELECT * FROM myReportcursor1 WHERE type = 2 ORDER BY name INTO CURSOR myReportcursor
		oapp.p_print_array(3) = 'NON - Company Contacts'
ENDCASE



Select myreportcursor

*modi report rptAgency_auths

If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh

	lcReportName = ALLTRIM('rptemail') &&
	** modi report rptAgency_auths

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif

ENDPROC
PROCEDURE m_employee_list
Lparameters lcparam1, lcParam2, lnOption

*!*	If oapp.p_computer_userid = 'mcnamae' ;
*!*			Or oapp.p_computer_userid = 'howlanc' ;
*!*			Or oapp.p_computer_userid = 'zoppola'

		
*** give authorization
If oapp.p_application_security_level > 2

	Messagebox('Restricted Reports',0+4096,'Not Authorized',12000)
	Return .F.

Endif


If Empty(lcparam1)
	lcwhereclause = ''
Endif

Dimension oapp.p_print_array(3)
oapp.p_print_array = ''
*** list all pending employees, sort by policedk_d8, rating, perferred
***
Dimension lcRating(4)
lcRating(1) = 'Not Rated'
lcRating(2) = 'Good     '
lcRating(3) = 'Very Good'
lcRating(4) = 'Excellent'
*** office restriction




Do Case

	Case lnOption = 0 	&& all active employees
		** restrict by office and hire date between dates
		oapp.p_print_array(1) = 'Active Employees by Hire Date'
		oapp.p_print_array(2) = 'Hire Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If !Empty(This.p_start_d8)
			lcwhereclause = lcwhereclause +' and employees.d8_hire => CTOD("'+ Dtoc(This.p_start_d8)+'") '
		Endif

		If !Empty(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and employees.d8_hire <= CTOD("'+ Dtoc(This.p_end_d8)+'") '
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 2  ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_hire, employees.name_full ;
			INTO Cursor myReportCursor Readwrite




	Case lnOption = 1 	&& on hold


		oapp.p_print_array(1) = 'Employees On Hold '
		oapp.p_print_array(2) = 'Status Change Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If !Empty(This.p_start_d8)
			lcwhereclause = lcwhereclause +' and employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '
		Endif

		If !Empty(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") '
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 3  ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 2	&& Never Worked

		oapp.p_print_array(1) = 'Employees Never Worded'
		oapp.p_print_array(2) = 'Status Change Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_status)  or( employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif






		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 7  ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite




	Case lnOption = 3 	&& Terminated (Quit)
		oapp.p_print_array(1) = 'Employees Terminated (Quit)'
		oapp.p_print_array(2) = 'Status Change Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_status)  or( employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 4  ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 4 	&& Terminated (Layoff)
		oapp.p_print_array(1) = 'Employees Terminated (Layoff)'
		oapp.p_print_array(2) = 'Status Change Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_status)  or( employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 5  ;
			&lcwhereclause ;
			ORDER By myOffices.office, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 5 	&& Terminated (Fired)
		oapp.p_print_array(1) = 'Employees Terminated (Fired)'
		oapp.p_print_array(2) = 'Status Change Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_status)  or( employees.d8_status => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_status <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif



		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 6 ;
			&lcwhereclause ;
			ORDER By myOffices.office, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 6	&& Pending Created
		oapp.p_print_array(1) = 'Employees Pending - Created'
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If !Empty(This.p_start_d8)
			lcwhereclause = lcwhereclause +' and( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '
		Endif

		If !Empty(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 7	&& Pending  Perferred

		oapp.p_print_array(1) = 'Employees Pending - Perferred '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause +' and bittest(employees.bit_setting,1) '

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '

		Endif

		If !Empty(This.p_start_d8)
			lcwhereclause = lcwhereclause +' and( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '
		Endif

		If !Empty(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 8	&& Pending Police Checks
		oapp.p_print_array(1) = 'Employees Pending - Created'
		oapp.p_print_array(2) = 'Police Check Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If !Empty(This.p_start_d8)
			lcwhereclause = lcwhereclause +' and( employees.policeck_d8 => CTOD("'+ Dtoc(This.p_start_d8)+'") '
		Endif

		If !Empty(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and employees.policeck_d8 <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite


	Case lnOption = 9	&& Pending Rated Good
		oapp.p_print_array(1) = 'Pending Employees Rated Good '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ' and employees.rating = 1 '
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif


		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_created)  or( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif






		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 10	&& Pending Rated Very Good
		oapp.p_print_array(1) = 'Pending Employees Rated Very Good '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ' and employees.rating = 2 '
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_created)  or( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif

		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 11	&& Pending Rated Excellent
		oapp.p_print_array(1) = 'Pending Employees Rated Excellent '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ' and employees.rating = 3 '
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_created)  or( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif


		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 12	&& Pending Not Rated
		oapp.p_print_array(1) = 'Pending Employees Not Rated  '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ' and employees.rating = 0'
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_created)  or( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif

		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 13	&& Active Not Rated
		oapp.p_print_array(1) = 'Active Employees Not Rated  '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ' and employees.rating = 0'
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_created)  or( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif

		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			WHERE employees.status_eid = 2 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor myReportCursor Readwrite
Case lnOption = 14	&& < 2 referrals

		oapp.p_print_array(1) = 'Active Employees with less than 2 references confirmed '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ''
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_created)  or( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif

		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status, ;
			emp_reference.pk, ;
			emp_reference.confirm ,;
			000 as ncountconfirm, ;
			000 as ncountnotconfirm ;
			FROM employee!employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			LEFT outer JOIN employee!emp_reference ON emp_reference.fk_employee = employees.pk ;
			WHERE employees.status_eid = 2 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor mytemp Readwrite
			
			SELECT fk_employee, COUNT(confirm) as cc ;
			FROM myTemp  ;
			WHERE !EMPTY(confirm);			
			GROUP BY fk_employee INTO CURSOR myScanCursor
			
			SELECT myScanCursor
			
			SCAN
				lnFk_employee = myScanCursor.fk_employee
				lnCount = myScanCursor.cc
				
			UPDATE myTemp ;
			SET ncountConfirm = lnCount WHERE fk_employee = lnFk_employee
			
			ENDSCAN
			
			Select name_full, ;
			office, ;
			bit_setting, ;
			rating, ;
			cRating, ;
			d8_created, ;
			policeck_d8, ;
			status_eid, ;
			fk_office, ;
			fk_employee, ;
			d8_available, ;
			d8_hire, ;
			d8_status;
			FROM myTemp ;
			WHERE ncountConfirm < 2 ;
			GROUP BY name_full, ;
			office, ;
			bit_setting, ;
			rating, ;
			cRating, ;
			d8_created, ;
			policeck_d8, ;
			status_eid, ;
			fk_office, ;
			fk_employee, ;
			d8_available, ;
			d8_hire, ;
			d8_status ;
			INTO CURSOR myReportCursor readwrite
			
		Case lnOption = 15	&& < 2 referrals Pending Employee

		oapp.p_print_array(1) = 'Pending Employees with less than 2 references confirmed '
		oapp.p_print_array(2) = 'Created Date '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ''
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If This.p_start_d8 => Date(2008,1,1)
			lcwhereclause = lcwhereclause +' and (employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") )'
		Else
			lcwhereclause = lcwhereclause +' and (empty(employees.d8_created)  or( employees.d8_created => CTOD("'+ Dtoc(This.p_start_d8)+'") '+;
				' and employees.d8_created <= CTOD("'+ Dtoc(This.p_end_d8)+'") ))'
		Endif

		Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status, ;
			emp_reference.pk, ;
			emp_reference.confirm ,;
			000 as ncountconfirm, ;
			000 as ncountnotconfirm ;
			FROM employee!employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			LEFT outer JOIN employee!emp_reference ON emp_reference.fk_employee = employees.pk ;
			WHERE employees.status_eid = 1 ;
			&lcwhereclause ;
			ORDER By myOffices.office,employees.d8_status, employees.name_full ;
			INTO Cursor mytemp Readwrite
			
			SELECT fk_employee, COUNT(confirm) as cc ;
			FROM myTemp  ;
			WHERE !EMPTY(confirm);			
			GROUP BY fk_employee INTO CURSOR myScanCursor
			
			SELECT myScanCursor
			
			SCAN
				lnFk_employee = myScanCursor.fk_employee
				lnCount = myScanCursor.cc
				
			UPDATE myTemp ;
			SET ncountConfirm = lnCount WHERE fk_employee = lnFk_employee
			
			ENDSCAN
			
			Select name_full, ;
			office, ;
			bit_setting, ;
			rating, ;
			cRating, ;
			d8_created, ;
			policeck_d8, ;
			status_eid, ;
			fk_office, ;
			fk_employee, ;
			d8_available, ;
			d8_hire, ;
			d8_status;
			FROM myTemp ;
			WHERE ncountConfirm < 2 ;
			GROUP BY name_full, ;
			office, ;
			bit_setting, ;
			rating, ;
			cRating, ;
			d8_created, ;
			policeck_d8, ;
			status_eid, ;
			fk_office, ;
			fk_employee, ;
			d8_available, ;
			d8_hire, ;
			d8_status ;
			INTO CURSOR myReportCursor readwrite
	
	
		Case lnOption = 16	&& Employees with scheduled during the time frame
			*** employees must be active
			
		oapp.p_print_array(1) = 'Active Employees with Schedules '
		oapp.p_print_array(2) = 'Between  Dates '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ''
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif
	
		IF EMPTY(This.p_start_d8)
			This.p_start_d8 = DATE()
		ENDIF
	
		lnFk_wk_1 = oapp.m_get_week_number(This.p_start_d8)
		lnFk_day_1 = DOW(This.p_start_d8,oapp.p_first_day_of_week)
		lnWkDay1 = 10*lnFk_wk_1+lnFk_day_1
		
		IF !EMPTY(This.p_end_d8)
		lnFk_wk_2 = oapp.m_get_week_number(This.p_end_d8)
		lnFk_day_2 = DOW(This.p_end_d8,oapp.p_first_day_of_week)
		lnWkDay2 = 10*lnFk_wk_2+lnFk_day_2
		endif
		
		
		
		If !EMPTY(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and ((10*sch_employee.fk_wk+sch_employee.fk_day) => lnWkDay1 ' +;
										' and 	(10*sch_employee.fk_wk+sch_employee.fk_day) <= lnWkDay2)'
		Else
			lcwhereclause = lcwhereclause +' and ((10*sch_employee.fk_wk+sch_employee.fk_day) => lnWkDay1 ) '
		Endif

		Select employees.pk As fk_employee ;
			FROM employee!employees ;
			inner JOIN schedule!sch_employee ON sch_employee.fk_employee = employees.pk ;
			WHERE employees.status_eid = 2 ;
			&lcwhereclause ;
			GROUP BY employees.pk  ;
			INTO Cursor myTemp readwrite
			
		
	Select employees.name_full, ;
			myOffices.office, ;
			employees.bit_setting, ;
			employees.rating, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status ;
			FROM employee!employees ;
			INNER Join myOffices On myOffices.fk_office = employees.fk_office ;
			inner JOIN myTemp  ON myTemp .fk_employee = employees.pk ;
			ORDER By myOffices.office,employees.name_full ;
			INTO Cursor myReportCursor readwrite
			
		
				
	Otherwise
		Return .F.
Endcase


















Select myReportCursor
If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh





	lcReportName = Alltrim(myReportOptions.rptName)

	Keyboard '{CTRL+F10}'
	Report Form  &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0


Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif


ENDPROC
PROCEDURE m_employee_list2
Lparameters lcparam1, lcParam2, lnOption

*!*	If oapp.p_computer_userid = 'mcnamae' ;
*!*			Or oapp.p_computer_userid = 'howlanc' ;
*!*			Or oapp.p_computer_userid = 'zoppola'



If Empty(lcparam1)
	lcwhereclause = ''
Endif

Dimension oapp.p_print_array(3)
oapp.p_print_array = ''
*** list all pending employees, sort by policedk_d8, rating, perferred
***
Dimension lcRating(4)
lcRating(1) = 'Not Rated'
lcRating(2) = 'Good     '
lcRating(3) = 'Very Good'
lcRating(4) = 'Excellent'
*** office restriction




Do Case


	Case lnOption = 0	&& Employees with scheduled during the time frame
		*** employees must be active

		oapp.p_print_array(1) = 'Active Employees with Schedules '
		oapp.p_print_array(2) = 'Between  Dates '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ''
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		Endif

		If Empty(This.p_start_d8)
			This.p_start_d8 = Date()
		Endif

		lnFk_wk_1 = oapp.m_get_week_number(This.p_start_d8)
		lnFk_day_1 = Dow(This.p_start_d8,oapp.p_first_day_of_week)
		lnWkDay1 = 10*lnFk_wk_1+lnFk_day_1

		If !Empty(This.p_end_d8)
			lnFk_wk_2 = oapp.m_get_week_number(This.p_end_d8)
			lnFk_day_2 = Dow(This.p_end_d8,oapp.p_first_day_of_week)
			lnWkDay2 = 10*lnFk_wk_2+lnFk_day_2
		Endif



		If !Empty(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and ((10*sch_employee.fk_wk+sch_employee.fk_day) => lnWkDay1 ' +;
				' and 	(10*sch_employee.fk_wk+sch_employee.fk_day) <= lnWkDay2)'
		Else
			lcwhereclause = lcwhereclause +' and ((10*sch_employee.fk_wk+sch_employee.fk_day) => lnWkDay1 ) '
		Endif

		Select employees.pk As fk_employee ;
			FROM employee!employees ;
			inner Join schedule!sch_employee On sch_employee.fk_employee = employees.pk ;
			WHERE employees.status_eid = 2 ;
			&lcwhereclause ;
			GROUP By employees.pk  ;
			INTO Cursor myTemp Readwrite


		Select employees.name_full, ;
			myOffices.office, ;
			employees.add1, ;
			employees.add2, ;
			employees.town, ;
			employees.state, ;
			employees.zip, ;
			employees.phone_1, ;
			employees.phone_2, ;
			employees.phone_cell, ;
			employees.bit_setting, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status, ;
			employees.d8_hold_start,;
			employees.d8_hold_end ;
			FROM employee!employees ;
			inner Join myOffices On myOffices.fk_office = employees.fk_office ;
			inner Join myTemp  On myTemp .fk_employee = employees.pk ;
			ORDER By myOffices.office,employees.name_full ;
			INTO Cursor myReportCursor Readwrite

	Case lnOption = 1	&& Employees without scheduled during the time frame
		*** employees must be active


		oapp.p_print_array(1) = 'Active Employees without Schedules '
		oapp.p_print_array(2) = 'Between  Dates '+Dtoc(This.p_start_d8)+' to '+Dtoc(This.p_end_d8)

		lcwhereclause = lcwhereclause + ''
		If !Empty(This.p_fk_office)
			lcwhereclause = lcwhereclause +' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
			lcWhereClause1 = ' and employees.fk_office = '+Alltrim(Str(This.p_fk_office))+' '
		ELSE
		    lcWhereClause1 = ''	
		Endif

		If Empty(This.p_start_d8)
			This.p_start_d8 = Date()
		Endif

		lnFk_wk_1 = oapp.m_get_week_number(This.p_start_d8)
		lnFk_day_1 = Dow(This.p_start_d8,oapp.p_first_day_of_week)
		lnWkDay1 = 10*lnFk_wk_1+lnFk_day_1

		If !Empty(This.p_end_d8)
			lnFk_wk_2 = oapp.m_get_week_number(This.p_end_d8)
			lnFk_day_2 = Dow(This.p_end_d8,oapp.p_first_day_of_week)
			lnWkDay2 = 10*lnFk_wk_2+lnFk_day_2
		Endif



		If !Empty(This.p_end_d8)
			lcwhereclause = lcwhereclause +' and 10*sch_employee.fk_wk+sch_employee.fk_day => '+STR(lnWkDay1) +;
				' and 10*sch_employee.fk_wk+sch_employee.fk_day <= '+STR(lnWkDay2)
		Else
			lcwhereclause = lcwhereclause +' and ((10*sch_employee.fk_wk+sch_employee.fk_day) => lnWkDay1 ) '
		Endif

*!*	Select employees.pk , ;
*!*				FROM employee!employees ;
*!*				inner Join schedule!sch_employee On sch_employee.fk_employee = employees.pk ;
*!*				WHERE employees.status_eid = 2 ;
*!*				INTO Cursor myTemp Readwrite
	
		*** get all active employees from office
		
		SELECT employees.pk ;
			FROM employee!employees ;
			WHERE employees.status_eid = 2 ;
			&lcWhereClause1 ;
			INTO CURSOR myAllEmployees

		Select employees.pk  ;
			FROM employee!employees ;
			inner Join schedule!sch_employee On sch_employee.fk_employee = employees.pk ;
			WHERE employees.status_eid = 2 ;
			&lcwhereclause ;
			GROUP By employees.pk  ;
			INTO Cursor myTemp Readwrite

		SELECT myAllEmployees.pk ;
			FROM myAllEmployees ;
			WHERE !(pk in (SELECT pk FROM myTemp)) ;
			INTO CURSOR mytemp2
		
			


		Select employees.name_full, ;
			myOffices.office, ;
			employees.add1, ;
			employees.add2, ;
			employees.town, ;
			employees.state, ;
			employees.zip, ;
			employees.phone_1, ;
			employees.phone_2, ;
			employees.phone_cell, ;
			employees.bit_setting, ;
			lcRating(employees.rating+1) As cRating, ;
			employees.d8_created, ;
			employees.policeck_d8, ;
			employees.status_eid, ;
			employees.fk_office, ;
			employees.pk As fk_employee, ;
			employees.d8_available, ;
			employees.d8_hire, ;
			employees.d8_status, ;
			employees.d8_hold_start,;
			employees.d8_hold_end ;
			FROM employee!employees ;
			inner Join myOffices On myOffices.fk_office = employees.fk_office ;
			INNER JOIN mytemp2 ON myTemp2.pk = employees.pk ;
			ORDER By myOffices.office,employees.name_full ;
			INTO Cursor myReportCursor Readwrite




	Otherwise
		Return .F.
Endcase


















Select myReportCursor

*MODIFY REPORT Alltrim(myReportOptions.rptName)


If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh





	lcReportName = Alltrim(myReportOptions.rptName)

	Keyboard '{CTRL+F10}'
	Report Form  &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0


Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif


ENDPROC
PROCEDURE m_employee_payrate
Lparameters lcparam1, lcparam2, lnOption



lnfk_office = This.p_fk_office


lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)
lnStartWkDay = 10*lnfk_wk_start + lnfk_day_start
lnEndWkDay = 10*lnfk_wk_end + lnfk_day_end



If !Empty(lnfk_office)
	lcwhereclause = ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif

Select * From myoffices Into Cursor myClientOffice
Select * From myoffices Into Cursor myEmployeeOffice




If !Used('myServices')

	Select Lookup.cname As service, Int(Val(Lookup.Code)) As fk_service;
		FROM ;
		lookups!gen_lookup ;
		inner Join lookups!Lookup ;
		ON  gen_lookup.pk = Lookup.fk_gen_lookup;
		WHERE  gen_lookup.cname == ( "SERVICE" );
		AND  Lookup.Active = ( .T. );
		ORDER By Lookup.cname ;
		INTO Cursor myServices

Endif



Select Sch_employee.fk_employee,;
	Auth.fk_client, ;
	Payor.fk_service, ;
	Auth.fk_payor,;
	Sch_employee.payrate, ;
	Employees.name_full As name_full_employee,;
	Payor.Id As payorID,;
	Clients.name_full As name_full_client, ;
	Clients.fk_office As fk_office_client, ;
	myClientOffice.office As clientOffice, ;
	Employees.fk_office As fk_office_employee, ;
	myEmployeeOffice.office As EmployeeOffice, ;
	myServices.service, ;
	Auth.pk As fk_auth,;
	sch_employee.pk ;
	From ;
	client!Auth ;
	inner Join client!Payor ;
	ON  Auth.fk_payor = Payor.pk ;
	inner Join schedule!Sch_employee ;
	ON  Auth.pk = Sch_employee.fk_auth ;
	inner Join client!Clients ;
	ON  Sch_employee.fk_client = Clients.pk ;
	inner Join employee!Employees ;
	ON  Sch_employee.fk_employee = Employees.pk;
	inner Join myServices ;
	ON myServices.fk_service = Payor.fk_service ;
	inner Join myClientOffice ;
	ON myClientOffice.fk_office = Clients.fk_office ;
	inner Join myEmployeeOffice ;
	ON myEmployeeOffice.fk_office = Employees.fk_office ;
	WHERE  10*Sch_employee.fk_wk + Sch_employee.fk_day => lnStartWkDay ;
	AND 10*Sch_employee.fk_wk + Sch_employee.fk_day <= lnEndWkDay ;
	AND sch_employee.blocksize > 0 ;
	&lcwhereclause ;
	ORDER By Sch_employee.fk_employee, Auth.fk_client, Payor.fk_service,Auth.fk_payor, Sch_employee.payrate ;
	INTO Cursor myemployeePay



Create Cursor myTestCursor ;
	(name_full_employee C(35), ;
	name_full_client C(35), ;
	payorID  C(10), ;
	payrate N(6,2), ;
	service C(15),;
	fk_employee I, ;
	fk_client I, ;
	fk_payor I,;
	fk_office_employee I, ;
	fk_office_client I,;
	clientOffice C(20),;
	EmployeeOffice C(20))

*!*	 SELECT myTestCursor
*!*	 INDEX ON fk_employee TAG employee additive
*!*	 INDEX ON fk_client TAG client additive
*!*	 INDEX ON fk_payor TAG payor additive
*!*	 INDEX ON payrate TAG payrate additive
*!*
*!*	 SET INDEX TO employee

lnfk_employee = 0
lnFk_client= 0
lnFk_payor= 0
lnFk_service= 0
lnPayRate= 0
lNewRecord = .F.

Select myemployeePay
Scan
	If myemployeePay.fk_employee != lnfk_employee
		lNewRecord = .T.
		lnfk_employee = myemployeePay.fk_employee
	Endif

	If myemployeePay.fk_client != lnFk_client
		lNewRecord = .T.
		lnFk_client = myemployeePay.fk_client
	Endif
	If myemployeePay.fk_service != lnFk_service
		lNewRecord = .T.
		lnFk_service = myemployeePay.fk_service
	Endif

	If myemployeePay.fk_payor != lnFk_payor
		lNewRecord = .T.
		lnFk_payor = myemployeePay.fk_payor
	Endif



	If myemployeePay.payrate != lnPayRate
		lNewRecord = .T.
		lnPayRate = myemployeePay.payrate
	Endif

	If lNewRecord
		Scatter Name orec
		Insert Into myTestCursor From Name orec
	Endif

	lNewRecord = .F.

Endscan



If !Empty(lnfk_office )
	Select * From myTestCursor ;
		WHERE fk_office_employee = lnfk_office ;
		OR fk_office_client = lnfk_office ;
		ORDER By name_full_employee,name_full_client,payorID, service, payrate ;
		INTO Cursor myReportCursor

Else
	Select * From myTestCursor ;
		ORDER By  name_full_employee,name_full_client,payorID, service, payrate ;
		INTO Cursor myReportCursor
Endif


Select myReportCursor
If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh


	lcReportName = Alltrim(myReportOptions.rptName) &&  report name in table

	*MODIFY REPORT &lcReportName

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview




	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif




ENDPROC
PROCEDURE m_employees_inactive
Lparameters lcparam1, lcParam2, lnOption

IF lnOption > 12
	MESSAGEBOX('Check your option!',0+4096,'Illegal Month',12000)
	RETURN .f.
ENDIF

DIMENSION lcMonth(12)
	lcMonth(1) = 'January'
	lcMonth(2) = 'February'
	lcMonth(3) = 'March'
	lcMonth(4) = 'April'
	lcMonth(5) = 'May'
	lcMonth(6) = 'June'
	lcMonth(7) = 'July'
	lcMonth(8) = 'August'
	lcMonth(9) = 'September'
	lcMonth(10) = 'October'
	lcMonth(11) = 'November'
	lcMonth(12) = 'December'
	
oapp.p_print_array(1)  = "Inactive Employee's "

If lnOption = 0 &&& date range

	ldStart = This.p_start_d8
	ldend = This.p_end_d8

	lcWhereClause1 = ' and employees.d8_status => CTOD("' +Dtoc(ldStart)+ '") and employees.d8_status <= CTOD("'+Dtoc(ldend)+'") '
&&oapp.p_print_array(2) leave for date range
ELSE
	
	IF lnOption < 12
	

	lcWhereClause1 = ' and MONTH(employees.d8_status) = '+Alltrim(Str(lnOption)) +' and YEAR(employees.d8_status) = YEAR(DATE()) '
	ELSE
	*** assume we if we are selecting Dec. then we are looking at previous year
	lcWhereClause1 = ' and MONTH(employees.d8_status) = '+Alltrim(Str(lnOption)) +' and YEAR(employees.d8_status) = YEAR(DATE()) -1 '
	ENDIF
	
	oapp.p_print_array(2) = 'For the Month of '+lcMonth(lnOption)
Endif

lnfk_office = This.p_fk_office


If !Empty(lnfk_office)
	lcwhereclause2 = ' and employees.fk_office = '+Alltrim(Str(lnfk_office))
	SELECT office FROM myOffices WHERE fk_office = lnFk_office INTO CURSOR myO
	oapp.p_print_array(3) = 'Office: '+myO.office
	
	
Else
	lcwhereclause2 = ''
	oapp.p_print_array(3) =''
Endif



Select Val(Code) As fk_status, cname ;
	FROM Lookup ;
	WHERE fk_gen_lookup = 310 ;
	INTO Cursor myEmployeeStatus



Select employees.name_full, ;
	myEmployeeStatus.cname, ;
	employees.d8_status ;
	FROM employees INNER Join myEmployeeStatus ;
	ON employees.status_eid = myEmployeeStatus.fk_status ;
	WHERE employees.status_eid >2 &lcWhereClause1 &lcwhereclause2 ;
	ORDER By name_full ;
	INTO Cursor myReportCursor



Select myReportCursor
If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh



	lcReportName = Alltrim(myReportOptions.rptName) &&
*!*		Set REPORTBEHAVIOR 80

*!*		Modify Report &lcReportName


	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0

Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif



ENDPROC
PROCEDURE m_insurance_clients
Lparameters lcparam1, lcParam2, lnOption
IF oapp.p_computer_userid = 'larosel'
** override
else
	IF oapp.p_application_security_level > 2
		MESSAGEBOX('Need authorization to run this report',0+4096,'Not Authorized',8000)
		RETURN .f.
	ENDIF
endif

SELECT clients.name_full, ;
clients.cid, ;
myClientStatus.status, ;
payor.name, ;
payor.add1, ;
payor.add2, ;
payor.town, ;
payor.state, ;
payor.zip, ;
payor.contact, ;
payor.phone1,;
payor.phone2, ;
payor.fax, ;
myServices.service, ;
payor.policy_code, ;
payor.billing_id, ;
payor.start_d8, ;
payor.end_d8, ;
payor.fund_code ;
from clients ;
inner join payor on payor.fk_client = clients.pk ;
INNER JOIN myServices ON payor.fk_service = myservices.fk_service ;
INNER JOIN myClientStatus ON myClientstatus.fk_status = clients.status_cid ;
where payor.fund_code == 'INS' ;
order by clients.name_full, payor.start_d8 ;
 into cursor myReportCursor readwrite



oApp.p_print_array(1) = 'Insurance Clients'

Select myreportcursor

*modi report rptAgency_auths

If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh

	lcReportName = ALLTRIM(myReportOptions.rptName) &&
	** modi report rptAgency_auths

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif


ENDPROC
PROCEDURE m_miss_sch_auth
Lparameters lcparam1, lcParam2, lnOption
*** key in on CCCI authorizations and determine missing hours scheduled
***
*** just look at weekly or every other week authorizations.

*** zero in on a particular week
CREATE CURSOR Miss_auth_hours ;
(fk_client I,;
	fk_auth I, ;
	service c(15),;
	id C(10), ;
	auth_hrs N(10,2), ;
	sch_hrs N(10,2),;
	name_full C(35), ;
	office C(15),;
	auth_start_d8 D,;
	expired D)


lnfk_office = This.p_fk_office

lnWeekNumber = oapp.m_get_week_number(This.p_start_d8)  &&& 4/21 to 4/27
ldDate1 = oapp.m_get_date_from_week_day(lnWeekNumber,1)
ldDate2 = ldDate1 + 6

oapp.p_print_array(2) = 'For the week of '+dtoc(This.p_start_d8)

If !Used('myServices')

	Select Lookup.cname As service, Val(Lookup.Code) As fk_service ;
		FROM Lookup ;
		INNER Join gen_lookup On gen_lookup.pk = Lookup.fk_gen_lookup ;
		WHERE gen_lookup.cname == 'SERVICE' ;
		INTO Cursor myServices



Endif
If !Used('myOfficess')

	Select Lookup.cname As office, Val(Lookup.Code) As fk_office ;
		FROM Lookup ;
		INNER Join gen_lookup On gen_lookup.pk = Lookup.fk_gen_lookup ;
		WHERE gen_lookup.cname == 'OFFICES' ;
		INTO Cursor myOffices



Endif


*** start by just getting weekly
Select Auth.pk As fk_auth, ;
	myOffices.office, ;
	Clients.name_full, ;
	Auth.start_d8, ;
	Auth.end_d8, ;
	Auth.rate,;
	Auth.visit_hours, ;
	Auth.visit_times, ;
	Auth.visit_period, ;
	Auth.visit_total,;
	myServices.service, ;
	clients.pk as fk_client,;
	Payor.Id , ;
	Payor.fk_service, ;
	payor.expired ;
	FROM ;
	client!Auth ;
	INNER Join client!Payor ON  Auth.fk_payor = Payor.pk ;
	INNER Join client!Clients ON  Auth.fk_client = Clients.pk ;
	INNER Join myServices On myServices.fk_service = Payor.fk_service ;
	INNER JOIN myOffices ON myOffices.fk_office = clients.fk_office ;
	WHERE   Auth.start_d8 <= ldDate2 ;
	AND  (  Empty(Auth.end_d8)	OR  ldDate1 <= Auth.end_d8 );
	AND Auth.visit_period = 'W' ;
	AND clients.status_cid = 2 ;
	ORDER By Clients.name_full, Auth.start_d8 ;
	INTO Cursor myAuths



Select Sum(visit_hours * visit_times) From myAuths Into Array mySumHours


*This.Parent.txtTotalHours.Value = mySumHours(1)


Select myAuths

Go Top
Scan
*!*	IF  myAuths.fk_client = 1002130
*!*	SET STEP ON
*!*	ENDIF

	lnfk_auth = myAuths.fk_auth

	lnAuthBlocksize = myAuths.visit_times * myAuths.visit_hours * 2

	Select * From sch_needs ;
		WHERE fk_auth = lnfk_auth;
		AND 10*start_fk_wk + start_fk_day <= 10*lnWeekNumber+7 ;
		AND (Empty(end_fk_wk) Or 10*end_fk_wk + end_fk_day => 10*lnWeekNumber+1) ;
		INTO Cursor myNeeds


lnTotalBlocksize = 0


	If _Tally # 0
		
		Select myNeeds
		Go Top
		Scan
			lnFk_sch_needs = myNeeds.pk

			Select *  From sch_employee ;
				WHERE fk_sch_needs = lnFk_sch_needs ;
				AND 10*fk_wk + fk_day <= 10*lnWeekNumber+7 ;
				AND 10*fk_wk + fk_day => 10*lnWeekNumber+1 ;
				INTO Cursor mySchedule
			If _Tally # 0
				Select Sum(Blocksize) From mySchedule Into Array myBlocksize

				If _Tally # 0
					lnTotalBlocksize = lnTotalBlocksize + myBlocksize(1)
				Endif


			Endif




		Endscan



	Endif

IF lnTotalBlocksize < lnAuthBlocksize

	INSERT INTO miss_auth_hours ;
	(fk_client, fk_auth, service, id, auth_hrs, sch_hrs,name_full,office,auth_start_d8, expired) ;
	VALUES ;
	(myAuths.fk_client, myAuths.fk_auth, myAuths.service, myAuths.id, lnAuthBlocksize /2,lnTotalBlocksize/2, myAuths.name_full, myAuths.office, myAuths.start_d8, myAuths.expired)

	*MESSAGEBOX(myAuths.name_full +' auth '+ALLTRIM(STR(lnfk_auth)) +' ..sch '+ALLTRIM(STR(lnTotalBlocksize/2))+'hrs....auth '+ALLTRIM(STR(lnAuthBlocksize /2)))
	*** we are missing something
endif
Endscan


SELECT * FROM Miss_auth_hours ORDER BY office, name_full, service INTO CURSOR myReportCursor

Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptmissschauth
lcReportName = ALLTRIM(myReportOptions.rptName)

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0		

ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF
ENDPROC
PROCEDURE m_missing_avail_towns
Lparameters lcparam1, lcParam2, lnOption


lnfk_office = This.p_fk_office

IF !EMPTY(lnFk_office)

lcEmployeeOffice  =  ' and Employees.fk_office = '+Alltrim(Str(lnfk_office))

ELSE

lcEmployeeOffice  = ''
ENDIF



*!*	If !Empty(lnfk_office)
*!*		lcwhereclause =  ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
*!*	Else
*!*		lcwhereclause = lcwhereclause+''
*!*	Endif



	SELECT 	employees.name_full, ;
	myemployeestatus.Status, ;
	myoffices.office ;
	FROM ;
	employees;
	LEFT Outer Join myoffices On myoffices.fk_office = employees.fk_office ;
	LEFT Outer Join myemployeestatus On myemployeestatus.fk_status = employees.status_eid ;
	WHERE (Empty(employees.avail_towns) ;
	AND  ( employees.status_eid ) =( 2) );
	AND  Not (Empty(pk) ) ;
	&lcEmployeeOffice ;
	ORDER BY  office, name_full ;
	INTO CURSOR  myreportcursor


Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule

Keyboard '{CTRL+F10}'
lcReportName = 'RPTMissingAvailTowns'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0
ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF




ENDPROC
PROCEDURE m_missing_id
Lparameters lcparam1, lcParam2, lnOption

**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	RETURN .f.
ENDIF

lcWhereClause = ''

lcTable = ALLTRIM(myReportOptions.lparam1)

IF lcTable = 'EMPLOYEES'
	lcwhereclause = lcWhereClause +' and EMPTY(eid) and status_eid = 2 '
ENDIF

IF lcTable = 'CLIENTS'
	lcwhereclause = lcWhereClause +' and EMPTY(cid) and status_cid = 2 '
ENDIF


	

Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif

ldStart = This.p_start_d8
ldend = this.p_end_d8


lnfk_office = This.p_fk_office


If !Empty(lnfk_office)
	lcwhereclause = lcWhereClause +' and '+lcTable+'.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = lcWhereClause +''
Endif



SELECT &lcTable..name_full, ;
		&lcTable..fk_office, ;
		myoffices.office As office ;
		FROM &lcTable ;
		inner Join myoffices ;
		ON myoffices.fk_office = &lcTable..fk_office ;
		WHERE .t. = .t. ;
			&lcWhereclause ;
		ORDER BY office, name_full ;
		INTO CURSOR myReportCursor



Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule
lcReportName = ALLTRIM(myReportOptions.rptName)

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0		

ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF
ENDPROC
PROCEDURE m_missing_town_zip
Lparameters lcparam1, lcParam2, lnOption

lnfk_office = This.p_fk_office

IF !EMPTY(lnFk_office)

lcClientOffice  =  ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
lcEmployeeOffice  =  ' and Employees.fk_office = '+Alltrim(Str(lnfk_office))

ELSE

lcClientOffice = ''
lcEmployeeOffice  = ''
ENDIF



*!*	If !Empty(lnfk_office)
*!*		lcwhereclause =  ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
*!*	Else
*!*		lcwhereclause = lcwhereclause+''
*!*	Endif


Select 'Missing Town ' As ctype, ;
	'Client' As ctype2, ;
	clients.name_full, ;
	myclientstatus.Status, ;
	myoffices.office ;
	FROM ;
	clients;
	LEFT Outer Join myoffices On myoffices.fk_office = clients.fk_office ;
	LEFT Outer Join myclientstatus On myclientstatus.fk_status = clients.status_cid ;
	WHERE (Empty(clients.fk_town) ;
	AND  ( clients.status_cid ) < ( 3 ) );
	AND  Not (Empty(pk) ) ;
	&lcClientOffice ;
	UNION ;
	SELECT 'Missing Town ' As ctype, ;
	'Employee' As ctype2, ;
	employees.name_full, ;
	myemployeestatus.Status, ;
	myoffices.office ;
	FROM ;
	employees;
	LEFT Outer  Join myoffices On myoffices.fk_office = employees.fk_office ;
	LEFT Outer  Join myemployeestatus On myemployeestatus.fk_status = employees.status_eid ;
	WHERE (Empty(employees.fk_town) ;
	AND  ( employees.status_eid ) < ( 3 ) );
	AND  Not (Empty(pk) ) ;
	&lcEmployeeOffice ;
	UNION ;
	SELECT 'Missing Zip ' As ctype, ;
	'Client' As ctype2, ;
	clients.name_full, ;
	myclientstatus.Status, ;
	myoffices.office ;
	FROM ;
	clients;
	LEFT Outer Join myoffices On myoffices.fk_office = clients.fk_office ;
	LEFT Outer Join myclientstatus On myclientstatus.fk_status = clients.status_cid ;
	WHERE (Empty(clients.zip) ;
	AND  ( clients.status_cid ) < ( 3 ) );
	AND  Not (Empty(pk) ) ;
	&lcClientOffice ;
	UNION ;
	SELECT 'Missing zip ' As ctype, ;
	'Employee' As ctype2, ;
	employees.name_full, ;
	myemployeestatus.Status, ;
	myoffices.office ;
	FROM ;
	employees;
	LEFT Outer Join myoffices On myoffices.fk_office = employees.fk_office ;
	LEFT Outer Join myemployeestatus On myemployeestatus.fk_status = employees.status_eid ;
	WHERE (Empty(employees.zip) ;
	AND  ( employees.status_eid ) < ( 3 ) );
	AND  Not (Empty(pk) ) ;
	&lcEmployeeOffice ;
	ORDER BY  office, ctype, ctype2 ;
	INTO CURSOR  myreportcursor


Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule

Keyboard '{CTRL+F10}'
lcReportName = 'RPTMissingTownZip'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0
ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF




ENDPROC
PROCEDURE m_new_term_employee
Lparameters lcparam1, lcParam2, lnOption


IF oapp.p_application_security_level > 2 AND oapp.p_application_security_level != 6
	MESSAGEBOX('Need authorization to run this report',0+4096,'Not Authorized',8000)
	RETURN .f.
ENDIF

IF !EMPTY(this.p_fk_office)
	lcWhere2 = ' and sbt_department.fk_office = '+ALLTRIM(STR(this.p_fk_office))
ELSE
	lcWhere2 = ''

ENDIF

lcStartDate = DTOC(this.p_start_d8)
lcEndDate = DTOC(this.p_end_d8)

DO case

	CASE lnOption <= 1  &&& New Hires
		lcWhere =' !EMPTY(CTOD(hiredt)) and CTOD(hiredt) <= CTOD("'+lcEndDate+'") and CTOD(hiredt) => CTOD("'+lcStartDate+'")' + lcWhere2
		lcOrder = 'hiredt, name_full'
		oapp.p_print_array(1) = 'Employee status transmitted from Hope to SBT'
		oapp.p_print_array(2) = 'New Hires'
		oapp.p_print_array(3)='From '+DTOC(this.p_start_d8)+' to '+DTOC(this.p_end_d8)
		
	CASE lnOption = 2  &&& termed
		lcWhere =' !EMPTY(CTOD(termdt)) and CTOD(termdt) <= CTOD("'+lcEndDate+'") and CTOD(termdt) => CTOD("'+lcStartDate+'")' +lcWhere2
		lcOrder = 'name_full, termdt'
		oapp.p_print_array(1) = 'Employee status transmitted from Hope to SBT'
		oapp.p_print_array(2) = "Terminated Employee's"
		oapp.p_print_array(3)='From '+DTOC(this.p_start_d8)+' to '+DTOC(this.p_end_d8)
		
		
	CASE lnOption = 3  && inactive
		lcWhere = ' status = "I" ' + lcWhere2
		lcorder = 'name_full'
		oapp.p_print_array(1) = 'Employee status transmitted from Hope to SBT'
		oapp.p_print_array(2) = "Inactive Employee's"
		oapp.p_print_array(3)=''
		
	OTHERWISE
		MESSAGEBOX('Need select an option for this report',0+4096,'Missing Option',8000)
	RETURN .f.
ENDCASE


IF !USED('newemployee')
	OPEN DATABASE oapp.p_data_location+'export\export.dbc'
	

ENDIF



SELECT ALLTRIM(newemployee.empllast)+','+ALLTRIM(newemployee.emplfirst) as name_full, ;
		sbt_department.office, ;
		newemployee.hiredt, ;
		newemployee.termdt ;
	FROM export!newemployee ;
	INNER JOIN export!sbt_department ON sbt_department.sbt_department = newemployee.deptid ;
	WHERE &lcWhere ;
	ORDER BY &lcOrder ;
	INTO CURSOR myReportCursor
		
Select myreportcursor
If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh


	*MODIFY REPORT rptNoAuths
	lcReportName = Alltrim(myReportOptions.rptName) &&  'rptEmployeeStatus   '

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0

Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif


ENDPROC
PROCEDURE m_no_auths
Lparameters lcparam1, lcParam2, lnOption

** lnPar



DO case

CASE lnOption = 1
	lcMacro = ' Payor.Type = 1 '
	oApp.p_print_array(1) = 'Service Orders without Authorizations'
	oApp.p_print_array(2) = '(Private Payors)'
	oApp.p_print_array(3) = ''
CASE lnOption = 2
	lcMacro = ' Payor.Type = 2 '
	oApp.p_print_array(1) = 'Service Orders without Authorizations'
	oApp.p_print_array(2) = '(Agency Payors)'
	oApp.p_print_array(3) = ''
CASE lnOption = 3 OR lnOption = 0
	lcMacro = ' .t. = .t. '
	oApp.p_print_array(1) = 'Service Orders without Authorizations'
	oApp.p_print_array(2) = '(All Payors)'
	oApp.p_print_array(3) = ''
ENDCASE



**** Service Orders with out Authorizations

Select Clients.name_full, ;
	Clients.cid, ;
	Payor.pk, ;
	Payor.fk_client,;
	Payor.start_d8, ;
	Payor.end_d8, ;
	Auth.pk As fk_auth, ;
	Payor.fk_service,;
	payor.id as payor_id, ;
	myServices.service, ;
	myOffices.office,;
	myclientstatus.status ;
	FROM ;
	client!Payor ;
	LEFT Outer Join client!Auth ;
	ON  Payor.pk = Auth.fk_payor ;
	INNER Join client!Clients ;
	ON  Payor.fk_client = Clients.pk;
	LEFT Outer Join myServices On myServices.fk_service = Payor.fk_service ;
	LEFT Outer Join myOffices On Clients.fk_office = myOffices.fk_office ;
	LEFT Outer Join myClientStatus On Clients.status_cid = myClientStatus.fk_status ;
	WHERE clients.status_cid < 3 ;
	AND  EMPTY(Payor.end_d8) ;
	AND &lcMacro ;
	AND  Empty(Payor.fk_client) = .F.;
	AND  Auth.pk Is Null;
	ORDER By myOffices.office, Clients.name_full ;
	INTO Cursor  myreportcursor



Select myreportcursor
If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh


	*MODIFY REPORT rptNoAuths
	lcReportName = Alltrim(myReportOptions.rptName) &&  'rptBillingVerify'

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0

Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif


ENDPROC
PROCEDURE m_no_schedule
Lparameters lcparam1, lcParam2, lnOption

** lcparam1 is Employees or Clients table
** lcParm2 0 = never scheduled
** lcParm2 1 = not scheduled between dates
If Empty(lcparam1)
	lcwhereclause = ''
Endif

Set NullDisplay To ''

lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office

Do Case
	Case Upper(Alltrim(lcparam1)) = 'EMPLOYEES'
		If Val(lcParam2) = 0  &&& employees (active / pending never scheduled)


			lcWhere1 = ' isnull(Sch_employee.fk_wk) = .t. '
			lcWhere2 = ' employees.status_eid <= 3 '
			If !Empty(lnfk_office)
				lcWhere3 = ' employees.fk_office = lnFk_office '
			Else
				lcWhere3 = ' .t. = .t. '
			ENDIF
			
			IF lnOption > 1
			*** restrict to date range for availability
			ldDate1 = this.p_start_d8
			ldDate2 = this.p_end_d8
			
			lcWhere1 = lcWhere1 +' and Employees.d8_available =>  ldDate1   and Employees.d8_available <=   ldDate2 '
			
			ENDIF
			
			
oapp.p_print_array(2)='(Cm-Companion, Hm-Homemaker, Lv-LIvein, Pc-PersonalCare)'
oapp.p_print_array(3) = '(Ch-Chore, On-Overnight, Az-ALZ)'
			Select 	myOffices.office, ;
				Employees.name_full, ;
				ALLTRIM(Employees.town)+', '+ALLTRIM(Employees.state) as town, ;
				Employees.phone_1, ;
				Employees.phone_2, ;
				Employees.phone_cell,;
				Employees.phone_beep,;
				SPACE(10) As companion,;
				SPACE(10) As homemaker, ;
				SPACE(10) As livein, ;
				SPACE(10) As personalcare, ;
				SPACE(10) As chore, ;
				SPACE(10) As overnight, ;
				SPACE(10) As alz, ;
				Employees.d8_available, ;
				Employees.pk As fk_employee, ;
				Sch_employee.fk_wk,;
				Sch_employee.fk_day, ;
				Sch_employee.fk_ts, ;
				Sch_employee.payrate,;
				Employees.fk_office,;
				Employees.fk_town ;
				FROM ;
				employee!Employees ;
				LEFT Outer Join schedule!Sch_employee ;
				ON  Employees.pk = Sch_employee.fk_employee;
				INNER Join myOffices On myOffices.fk_office = Employees.fk_office ;
				WHERE  Employees.pk <> 0;
				AND   &lcWhere1 ;
				AND &lcWhere2  ;
				AND &lcWhere3 ;
				ORDER By myOffices.office,d8_available,Employees.name_full ;
				INTO Cursor myreportcursor Readwrite





			Select myreportcursor
			Go Top

			Scan

				lnFk_employee = myreportcursor.fk_employee

				Select fk_service, ;
					payrate ;
					FROM employee_payrate ;
					WHERE Empty(endd8)  And fk_employee = lnFk_employee ;
					ORDER By fk_service ;
					INTO Array myPay

				If _Tally # 0
					For ix = 1 To Alen(myPay,1)
						Do Case
							Case myPay(ix,1) = 1
								Replace companion With Alltrim(Str(myPay(ix,2),6,2)) In 'myreportcursor'
							Case myPay(ix,1) = 2
								Replace  homemaker With Alltrim(Str(myPay(ix,2),6,2)) In 'myreportcursor'
							Case myPay(ix,1) = 3
								Replace  livein With Alltrim(Str(myPay(ix,2),6,2)) In 'myreportcursor'
							Case myPay(ix,1) = 4
								Replace  personalcare With Alltrim(Str(myPay(ix,2),6,2)) In 'myreportcursor'
							Case myPay(ix,1) = 5
								Replace  chore With Alltrim(Str(myPay(ix,2),6,2)) In 'myreportcursor'
							Case myPay(ix,1) = 6
								Replace  overnight With Alltrim(Str(myPay(ix,2),6,2)) In 'myreportcursor'
							Case myPay(ix,1) = 7
								Replace  alz With Alltrim(Str(myPay(ix,2),6,2)) In 'myreportcursor'


						Endcase


					Endfor


				Endif

				Select myreportcursor

			Endscan




		Endif

		If Val(lcParam2) = 1
			Set Step On
		Endif


	Case Upper(Alltrim(lcparam1)) = 'CLIENTS'
		If Val(lcParam2) = 0
			Set Step On
		Endif

		If Val(lcParam2) = 1
			Set Step On
		Endif

Endcase


Select myreportcursor
If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh


	
lcReportName = ALLTRIM(myReportOptions.rptName)
IF lnOption = 1 OR lnOption = 3
lcReportName = lcReportName +'_calllist'
oApp.p_print_array(1) ='Employee Call List'
oApp.p_print_array(2) = ''
oApp.p_print_array(3) = ''
ENDIF




*MODIFY REPORT &lcReportname

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview





	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif




ENDPROC
PROCEDURE m_open_fills
Lparameters lcparam1, lcParam2, lnOption


IF oapp.p_application_security_level > 3
	MESSAGEBOX('You do not have authorization to run this report!',0+4096,'Limited Authorization',12000)
	RETURN .f.

ENDIF


*** temp fix to clear up bogus employee records

DELETE FOR pk < 0 IN 'employees'



**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF



Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif


lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office


If !Empty(lnfk_office)
	lcwhereclause = ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif


Select ;
	clients.name_full As name_full_client, ;
	clients.fk_office As fk_office_client, ;
	clients.town As town_client, ;
	myoffices.office As client_office, ;
	clients.fk_priority, ;
	mypriority.priority, ;
	auth.visit_period, ;
	auth.visit_total, ;
	payor.fk_service, ;
	myservices.service, ;
	sch_employee.pk as fk_sch_employee, ;
	sch_employee.fk_sch_needs, ;
	sch_employee.fk_wk, ;
	sch_employee.fk_day, ;
	sch_employee.fk_ts, ;
	sch_employee.fk_reminder, ;
	sch_employee.blocksize, ;
	clients.pk as fk_client, ;
	mydaynames.Dayname, ;
	{} As sched_date, ;
	.t. as openfill ,;
	payor.type, ;
	payor.id ,;
	payor.fk_payor ;
	FROM ;
	schedule!sch_employee ;
	inner Join client!auth ;
	ON  sch_employee.fk_auth = auth.pk ;
	inner Join client!payor ;
	ON  auth.fk_payor = payor.pk ;
	inner Join client!clients ;
	ON  sch_employee.fk_client = clients.pk;
	inner Join myoffices ;
	ON myoffices.fk_office = clients.fk_office ;
	inner Join myservices ;
	ON myservices.fk_service =   payor.fk_service ;
	LEFT Outer Join mypriority ;
	ON mypriority.fk_priority = clients.fk_priority ;
	inner Join mydaynames ;
	ON mydaynames.fk_day = sch_employee.fk_day ;
	WHERE  sch_employee.Blocksize > 0 and ;
		sch_employee.fk_employee <= 0 AND ;
		(10*sch_employee.fk_wk  + sch_employee.fk_day) => (10*lnfk_wk_start + lnfk_day_start) And;
	(10*sch_employee.fk_wk  + sch_employee.fk_day) <= (10*lnfk_wk_end + lnfk_day_end) ;
	&lcwhereclause ;
	ORDER By myoffices.office, sch_employee.fk_wk, sch_employee.fk_day , mypriority.priority, clients.name_full ;
	into Cursor myreportcursor Readwrite

&&sch_employee.fk_employee != sch_needs.fk_employee AND ;

*** now we need to add the rest of the fields
** BITTEST(contact_bit,0)  we do not need to contact contact first
** in contact table, bittest(bit_setting,0) indicates an emergency contact

Select myreportcursor
Go Top
SCAN
	
	
	IF INDEXSEEK( myReportCursor.fk_sch_needs,.t.,'sch_needs','pk')
		IF sch_needs.fk_employee <= 0   AND myReportCursor.visit_period != 'D1' &&& open need
			replace openfill WITH .f. IN 'myReportCursor'
		
		ELSE
			Replace sched_date With oapp.m_get_date_from_week_day(myreportcursor.fk_wk,myreportcursor.fk_day) In 'myReportCursor'
		
		*** now check to see if a reminder exists.
		
		
		INDEXSEEK(myReportCursor.fk_reminder,.t.,'reminders','pk')
		IF !EMPTY(reminders.d8_complete)
			replace fk_reminder WITH 0 IN 'myReportCursor'
		ENDIF
		
		
		ENDIF
		
	ELSE &&& no needs which would suggest a 1X
		Replace sched_date With oapp.m_get_date_from_week_day(myreportcursor.fk_wk,myreportcursor.fk_day) In 'myReportCursor'
	ENDIF
	
Endscan

DELETE FOR openfill = .f. IN 'myReportCursor'


SELECT * FROM myReportCursor WHERE !DELETED() INTO CURSOR  myArrayTest

IF _tally # 0



Select myreportcursor


IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule

Keyboard '{CTRL+F10}'
lcReportName = 'RPTSCHEDULE_OPENS'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0
ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF
ELSE
MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)

ENDIF


ENDPROC
PROCEDURE m_open_fills_old
Lparameters lcparam1, lcParam2, lnOption

*** temp fix to clear up bogus employee records

DELETE FOR pk < 0 IN 'employees'



**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF



Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif


lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office


If !Empty(lnfk_office)
	lcwhereclause = ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif


Select ;
	clients.name_full As name_full_client, ;
	clients.add1 As add1_client, ;
	clients.add2 As add2_client,;
	clients.town As town_client, ;
	clients.fk_office As fk_office_client, ;
	clients.bit_client As contact_bit, ;
	myoffices.office As client_office, ;
	clients.phone_1 As phone_1_client, ;
	clients.phone_2 As phone_2_client,;
	clients.phone_cell As phone_cell_client, ;
	clients.fk_priority, ;
	mypriority.priority, ;
	auth.start_d8, ;
	auth.end_d8,;
	auth.hold_start_d8, ;
	auth.rate, ;
	auth.period, ;
	auth.gasmileage,;
	auth.visit_total, ;
	payor.fk_service, ;
	myservices.service, ;
	employees.name_full As name_full_employee, ;
	employees.town As town_employee,;
	employees.fk_office As fk_office_employee, ;
	employees.phone_1 As phone_1_employee, ;
	employees.phone_2 As phone_2_employee,;
	employees.phone_cell As phone_cell_employee, ;
	employees.phone_beep As phone_beep_employee, ;
	sch_employee.pk as fk_sch_employee, ;
	sch_employee.fk_reminder, ;
	sch_employee.fk_client, ;
	sch_employee.fk_auth,;
	sch_employee.fk_wk, ;
	sch_employee.fk_day, ;
	mydaynames.Dayname, ;
	{} As sched_date, ;
	sch_employee.fk_ts,;
	sch_employee.Blocksize, ;
	sch_employee.fk_employee, ;
	sch_employee.payrate,;
	sch_employee.bonus, ;
	timeslots.timeslot, ;
	mydummy.Comment As client_contact ;
	FROM ;
	schedule!sch_employee ;
	inner Join lookups!timeslots ;
	ON  sch_employee.fk_ts = timeslots.pk ;
	LEFT Outer Join employee!employees ;
	ON  sch_employee.fk_employee = employees.pk ;
	inner Join client!auth ;
	ON  sch_employee.fk_auth = auth.pk ;
	inner Join client!payor ;
	ON  auth.fk_payor = payor.pk ;
	inner Join client!clients ;
	ON  sch_employee.fk_client = clients.pk;
	inner Join myoffices ;
	ON myoffices.fk_office = clients.fk_office ;
	inner Join myservices ;
	ON myservices.fk_service =   payor.fk_service ;
	LEFT Outer Join mypriority ;
	ON mypriority.fk_priority = clients.fk_priority ;
	inner Join mydaynames ;
	ON mydaynames.fk_day = sch_employee.fk_day ;
	WHERE  sch_employee.Blocksize > 0 and ;
		sch_employee.fk_employee <= 0 AND ;
		sch_employee.fk_employee != sch_needs.fk_employee AND ;
	(10*sch_employee.fk_wk  + sch_employee.fk_day) => (10*lnfk_wk_start + lnfk_day_start) And;
	(10*sch_employee.fk_wk  + sch_employee.fk_day) <= (10*lnfk_wk_end + lnfk_day_end) ;
	&lcwhereclause ;
	ORDER By myoffices.office, sch_employee.fk_wk, sch_employee.fk_day , mypriority.priority, clients.name_full ;
	into Cursor myreportcursor Readwrite

&&sch_employee.fk_employee != sch_needs.fk_employee AND ;

*** now we need to add the rest of the fields
** BITTEST(contact_bit,0)  we do not need to contact contact first
** in contact table, bittest(bit_setting,0) indicates an emergency contact

Select myreportcursor
Go Top
Scan
	Replace sched_date With oapp.m_get_date_from_week_day(myreportcursor.fk_wk,myreportcursor.fk_day) In 'myReportCursor'

	If !Bittest(contact_bit,0)

		Select Name, phone1, phone2, phone_cell, Relation ;
			FROM contacts ;
			LEFT Outer Join myrelation ;
			ON myrelation.fk_relation = contacts.fk_relation ;
			WHERE fk_client = myreportcursor.fk_client ;
			AND Bittest(bit_setting,0) ;
			INTO Array mycontacts

		If _Tally # 0
			lccontact = ''
			For ix = 1 To Alen(mycontacts,1)
				If !Empty(lccontact)
					lccontact = lccontact + Chr(13)
				Endif
				If Isnull(mycontacts(ix,5))
					mycontacts(ix,5) = 'none'
				Endif

				lccontact = Alltrim(mycontacts(ix,1))+;
					' {'+Alltrim(mycontacts(ix,5))+;
					'} ('+Alltrim(mycontacts(ix,2))+;
					')('+Alltrim(mycontacts(ix,3))+;
					')('+Alltrim(mycontacts(ix,4))+')'

			Endfor


			Replace client_contact With lccontact In 'myReportCursor'
		Endif


	Endif



Endscan





Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule

Keyboard '{CTRL+F10}'
lcReportName = 'RPTSCHEDULE_OPENS'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0
ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF




ENDPROC
PROCEDURE m_open_matches
Lparameters lcparam1, lcParam2, lnOption



IF oapp.p_application_security_level > 3
	MESSAGEBOX('You do not have authorization to run this report!',0+4096,'Limited Authorization',12000)
	RETURN .f.

ENDIF



*** temp fix to clear up bogus employee records

DELETE FOR pk < 0 IN 'employees'


**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF



Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif

ldStartDate = This.p_start_d8
ldEndDate = This.p_end_d8

lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office


If !Empty(lnfk_office)
	lcwhereclause = ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif




Select ;
	clients.name_full As name_full_client, ;
	clients.add1 As add1_client, ;
	clients.add2 As add2_client,;
	clients.town As town_client, ;
	clients.fk_office As fk_office_client, ;
	clients.bit_client As contact_bit, ;
	myoffices.office As client_office, ;
	clients.phone_1 As phone_1_client, ;
	clients.phone_2 As phone_2_client,;
	clients.phone_cell As phone_cell_client, ;
	clients.fk_priority, ;
	mypriority.priority, ;
	auth.start_d8, ;
	auth.end_d8,;
	auth.hold_start_d8, ;
	auth.rate, ;
	auth.period, ;
	auth.visit_period, ;
	auth.gasmileage,;
	auth.visit_total, ;
	payor.fk_service, ;
	myservices.service, ;
	sch_needs.pk as fk_sch_needs, ;
	sch_needs.fk_client, ;
	sch_needs.fk_auth,;
	sch_needs.start_fk_wk, ;
	sch_needs.start_fk_day, ;
	sch_needs.end_fk_wk, ;
	sch_needs.end_fk_day, ;
	sch_needs.fk_reminder, ;
	mydaynames.Dayname, ;
	{} As next_need_date, ;
	sch_needs.fk_ts,;
	sch_needs.Blocksize, ;
	timeslots.timeslot, ;
	payor.type, ;
	payor.id ,;
	payor.fk_payor ,;
	mydummy.Comment As client_contact ;
	FROM ;
	schedule!sch_needs ;
	inner Join lookups!timeslots ;
	ON  sch_needs.fk_ts = timeslots.pk ;
	inner Join client!auth ;
	ON  sch_needs.fk_auth = auth.pk ;
	inner Join client!payor ;
	ON  auth.fk_payor = payor.pk ;
	inner Join client!clients ;
	ON  sch_needs.fk_client = clients.pk;
	inner Join myoffices ;
	ON myoffices.fk_office = clients.fk_office ;
	inner Join myservices ;
	ON myservices.fk_service =   payor.fk_service ;
	LEFT Outer Join mypriority ;
	ON mypriority.fk_priority = clients.fk_priority ;
	inner Join mydaynames ;
	ON mydaynames.fk_day = sch_needs.start_fk_day ;
	WHERE 	sch_needs.pk > 0 AND ;
	sch_needs.fk_employee <= 0 AND ;
	 sch_needs.Blocksize > 0 and ;
	 (auth.start_d8 <= ldEnddate AND (EMPTY(auth.end_d8) OR auth.end_d8 => ldStartdate)) ;
	 AND auth.visit_period != 'D1' ;
	&lcwhereclause ;
	ORDER By myoffices.office,clients.name_full, sch_needs.start_fk_wk, sch_needs.start_fk_day ;
	into Cursor myreportcursor_temp Readwrite


*SET STEP ON
*** now we need to find the next date for open need


SELECT myReportCursor_temp
GO top
SCAN
*!*	IF 'Wilson' $ myReportCursor_temp.name_full_client
*!*	SET STEP ON
*!*	SELECT *  FROM sch_employee ;
*!*		WHERE fk_sch_needs = myReportcursor_temp.fk_sch_needs ;
*!*			AND sch_employee.fk_employee < 0 ;
*!*			AND (10*sch_employee.fk_wk  + sch_employee.fk_day) => (10*lnfk_wk_start + lnfk_day_start) ;
*!*			AND sch_employee.blocksize > 0 ;
*!*		ORDER BY fk_wk asc, fk_day ASC
*!*	ENDIF


	SELECT fk_wk, fk_day FROM sch_employee ;
	WHERE fk_sch_needs = myReportcursor_temp.fk_sch_needs ;
		AND sch_employee.fk_employee <= 0 ;
		AND (10*sch_employee.fk_wk  + sch_employee.fk_day) => (10*lnfk_wk_start + lnfk_day_start) ;
		AND (10*sch_employee.fk_wk  + sch_employee.fk_day) <= (10*lnfk_wk_end + lnfk_day_end) ;
		AND sch_employee.blocksize > 0 ;
	ORDER BY fk_wk asc, fk_day ASC ;
	INTO ARRAY myMatchArray
	
IF _tally # 0

	lnNext_need_date = oapp.m_get_date_from_week_day(myMatchArray(1),myMatchArray(2))
	lcDayName = cdow(lnNext_need_date)
	replace next_need_date WITH lnNext_need_date  ,;
			dayname WITH lcDayname in 'myReportcursor_temp'

ELSE
	*  do nothing

ENDIF
	
	
ENDSCAN

*now get rid of duplicates
SELECT * FROM myreportcursor_temp ;
WHERE !EMPTY(next_need_date) ;
ORDER BY client_office,name_full_client, next_need_date ;
INTO CURSOR myreportcursor_temp2 readwrite

GO top
lcLastClient = ''
SCAN
	IF lcLastClient = myReportcursor_temp2.name_full_client
		
		replace name_full_client WITH '' IN 'myReportCursor_temp2'
	ELSE
	lcLastClient = myReportcursor_temp2.name_full_client	
	endif
	
ENDSCAN


SELECT * FROM myReportcursor_temp2 ;
WHERE !EMPTY( next_need_date) ;
	AND !EMPTY(name_full_client) ;
ORDER BY client_office, next_need_date, priority ;
INTO CURSOR myReportCursor readwrite

&&& now we need to verify which fk_reminders are closed.  If they are
&&& then we need to remove the fk_reminder

SELECT myReportCursor
GO top
SCAN
	IF !EMPTY(myReportCursor.fk_reminder)
		INDEXSEEK(myReportCursor.fk_reminder,.t.,'reminders','pk')
		IF !EMPTY(reminders.d8_complete)
			replace fk_reminder WITH 0 IN 'myReportCursor'
		ENDIF
	ENDIF
ENDSCAN


Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule

Keyboard '{CTRL+F10}'
lcReportName = 'RPTOPENMATCHES'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0


ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF




ENDPROC
PROCEDURE m_payor_verify
Lparameters lcparam1, lcParam2, lnOption


*lcParam1 = 1 ===> Agency
*lcParam1 = 2 ===> Private

** lcParam2 !empty() indicates to order by Payor
lnPayorType = VAL(lcParam1)

lnfk_office = This.p_fk_office



If !Empty(lnfk_office)
	lcwhereclause = ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif


IF !EMPTY(lcParam2)
	lcOrderBy = ' payor.id, Clients.name_full '
ELSE
	lcOrderBy = ' Clients.fk_office, clients.pk, Clients.name_full '
ENDIF


SELECT Clients.fk_office, ;
	myOffices.office, ;
	Payor.name, ;
	Payor.add1, ;
	Payor.add2, ;
	Payor.state,;
 	Payor.town, ;
 	Payor.zip, ;
 	Payor.start_d8, ;
 	Payor.end_d8, ;
 	Clients.name_full,;
  	Payor.fk_service, ;
  	myServices.service, ;
  	Payor.rate, ;
  	Payor.duration, ;
  	Payor.billing_id,;
  	Payor.client_ident, ;
  	Payor.fund_code, ;
  	Payor.policy_code,;
  	Payor.emsmedicaid, ;
  	Payor.diagnosis_code, ;
  	Clients.status_cid, ;
  	clients.pk as fk_client, ;
  	Payor.id,;
  	payor.pk as fk_payor, ;
  	Payor.bit_service;
 FROM ;
     client!clients ;
    INNER JOIN client!payor ;
   ON  Clients.pk = Payor.fk_client;
   	INNER JOIN myOffices ;
   	ON myOffices.fk_office = clients.fk_office ;
   	INNER JOIN myServices ;
   	ON myServices.fk_service = payor.fk_service ;
 WHERE  (  Clients.status_cid = 2 ;
   AND  Payor.type =  lnPayorType ;
   AND  BITTEST(Payor.bit_service,3) = .F.);
      AND  (EMPTY(Payor.end_d8) = .T. OR (Payor.end_d8 =>DATE()-14));
      &lcWhereClause ;
 ORDER BY &lcOrderBy ;
 INTO cursor myReportCursor

 &&& include those that have ended in the last 2 weeks





Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


lcReportName = ALLTRIM(myReportOptions.rptName)

*MODIFY REPORT &lcReportname

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview



Thisform.WindowState = 0
ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF




ENDPROC
PROCEDURE m_phonelist
Lparameters lcparam1, lcParam2, lnOption

*lcparam1 = .t. >>>> print all
*lcparam1 = .f. >>>> print only questionable ones
**lnoption 0 Sort by Office, Agency, Client
**		   1 Sort by Office, Client
**		   2 Authorizations to Expire in date range
ldStart = This.p_start_d8
ldend = This.p_end_d8




lnfk_office = This.p_fk_office



If !Empty(lnfk_office)
	lcwhereclause = ' and fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif





SET STEP ON




Do Case
	Case lnOption = 0 &&&
	SELECT Clients.name_full, Clients.phone_1, myOffices.office, clients.fk_office, .f. as lflag ;
			 FROM client!clients;
			 INNER Join myOffices On myOffices.fk_office = Clients.fk_office ;
			 WHERE  Clients.status_cid = 2;
			 INTO Cursor myreportcursor1 Readwrite
				
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,name_full  '
		
	Case lnOption = 1 &&
		SELECT Clients.name_full, Clients.phone_1, myOffices.office, clients.fk_office, .f. as lflag ;
			 FROM client!clients;
			 INNER Join myOffices On myOffices.fk_office = Clients.fk_office ;
			 WHERE  Clients.status_cid = 2;
			INTO Cursor myreportcursor1 Readwrite
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,phone_1 '
	Case lnOption = 2 &&
		SELECT Clients.name_full, Clients.phone_1, myOffices.office, clients.fk_office, .f. as lflag ;
			 FROM client!clients;
			 INNER Join myOffices On myOffices.fk_office = Clients.fk_office ;
			 WHERE  Clients.status_cid = 2;
			INTO Cursor myreportcursor1 Readwrite
				
		Update myreportcursor1 Set lflag = .T., office = 'By Phone'
		lcOrderMacro = ' phone_1 '	
	
	Case lnOption = 3 &&&
	SELECT Employees.name_full, Employees.phone_1, myOffices.office, Employees.fk_office, .f. as lflag ;
			 FROM Employee!Employees;
			 INNER Join myOffices On myOffices.fk_office = Employees.fk_office ;
			 WHERE  Employees.status_eid = 2;
			INTO Cursor myreportcursor1 Readwrite
				
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,name_full  '
	
	Case lnOption = 4 &&&
	SELECT Employees.name_full, Employees.phone_1, myOffices.office, Employees.fk_office, .f. as lflag ;
			 FROM Employee!Employees;
			 INNER Join myOffices On myOffices.fk_office = Employees.fk_office ;
			 WHERE  Employees.status_eid = 2;
			INTO Cursor myreportcursor1 Readwrite
				
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,name_full  '
	
	Case lnOption = 5 &&&
	SELECT Employees.name_full, Employees.phone_1, myOffices.office, Employees.fk_office, .f. as lflag ;
			 FROM Employee!Employees;
			 INNER Join myOffices On myOffices.fk_office = Employees.fk_office ;
			 WHERE  Employees.status_eid = 2;
			INTO Cursor myreportcursor1 Readwrite
				
		Update myreportcursor1 Set lflag = .T., office = 'By Phone'
		lcOrderMacro = ' phone_1 '	
		
	Otherwise wise
		lnOption = 0
		SELECT Clients.name_full, Clients.phone_1, myOffices.office, clients.fk_office, .f. as lflag ;
			 FROM client!clients;
			 INNER Join myOffices On myOffices.fk_office = Clients.fk_office ;
			 WHERE  Clients.status_cid = 2;
			 INTO Cursor myreportcursor1 Readwrite
				
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,name_full  '
		
Endcase

Alines(aa,myReportOptions.Comment,1)

oApp.p_print_array(3) = 'Option '+aa(lnOption+2)




Select  * From myreportcursor1 ;
	WHERE lflag = .T. &lcwhereclause ;
	ORDER By &lcOrderMacro ;
	INTO Cursor myreportcursor Readwrite




Select myreportcursor

*modi report rptAgency_auths

If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh

	lcReportName = ALLTRIM(myReportOptions.rptName) &&
	** modi report rptAgency_auths

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif





ENDPROC
PROCEDURE m_priv_payor_check
Lparameters lcparam1, lcParam2, lnOption

*lcparam1 = .t. >>>> print all
*lcparam1 = .f. >>>> print only questionable ones
**lnoption 0 only different ones
**		   1 all
**         2 Only Non Verified
**         3 expire between dates
ldStart = This.p_start_d8
ldend = This.p_end_d8




lnfk_office = This.p_fk_office



If !Empty(lnfk_office)
	lcwhereclause = ' and fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif







*** possible payor information needing checking


Select Alltrim(Clients.name_first)+' '+Alltrim(Clients.name_middle)+' '+Alltrim(Clients.name_last) As cname,;
	Clients.add1 As cadd1, ;
	Clients.add2 As cadd2,;
	Clients.town As ctown, ;
	Clients.state As cstate, ;
	Clients.zip As czip, ;
	Payor.Name As pName, ;
	Payor.add1 As padd1, ;
	Payor.add2 As padd2,;
	Payor.town As ptown, ;
	Payor.state As pstate, ;
	Payor.zip As pzip,;
	Payor.ver_userid,;
	Payor.expired,;
	Clients.name_full, ;
	Clients.pk As fk_client, ;
	Clients.fk_office, ;
	myOffices.office, ;
	myServices.service, ;
	Payor.rate, ;
	Payor.duration, ;
	.F. As lflag ;
	FROM ;
	client!Clients ;
	INNER Join client!Payor ;
	ON  Clients.pk = Payor.fk_client;
	INNER Join myOffices On myOffices.fk_office = Clients.fk_office ;
	INNER Join myServices On myServices.fk_service = Payor.fk_service ;
	WHERE  Clients.status_cid < 3 ;
	AND  Payor.Id = ( "PRIV" ) ;
	AND  (  Empty(Payor.end_d8)  Or  Payor.end_d8 > Date() ) ;
	ORDER By name_full ;
	INTO Cursor myreportcursor1 Readwrite




Do Case
	Case lnOption = 0

		Update myreportcursor1 Set lflag = .T. Where fk_client In ;
			( Select fk_client From  myreportcursor1 ;
			WHERE Strtran(Upper(cname),' ','') != Strtran(Upper(pName),' ','') ;
			or  Strtran(Upper(cadd1),' ','') != Strtran(Upper(padd1),' ','') ;
			or  Strtran(Upper(cadd2),' ','') != Strtran(Upper(padd2),' ','') ;
			or  Strtran(Upper(ctown),' ','') != Strtran(Upper(ptown),' ','') ;
			or  Strtran(Upper(cstate),' ','') != Strtran(Upper(pstate),' ','') ;
			or  Strtran(Upper(czip),' ','') != Strtran(Upper(pzip),' ',''))
	Case lnOption = 1
		Update myreportcursor1 Set lflag = .T.

	Case lnOption = 2
		Update myreportcursor1 Set lflag = .T. Where Empty(expired)
	Case lnOption = 3

		Update myreportcursor1 Set lflag = .T. Where !Empty(expired) And expired => ldStart And expired <= ldend
	Otherwise wise
		lnOption = 1
		Update myreportcursor1 Set lflag = .T.
Endcase

Alines(aa,myReportOptions.Comment,1)

oApp.p_print_array(3) = 'Option '+aa(lnOption+2)




Select * From myreportcursor1 ;
	WHERE lflag = .T. &lcwhereclause ;
	ORDER By office, name_full ;
	INTO Cursor myreportcursor Readwrite




Select myreportcursor
If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh


	*MODIFY REPORT rpt_priv_payor_check
lcReport = 'rpt_priv_payor_check'
	Keyboard '{CTRL+F10}'
	Report Form &lcReport To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif





ENDPROC
PROCEDURE m_reminders
Lparameters lcparam1, lcParam2, lnOption


*** lnOption 0 = due, 1 = completed, 2 Over due
lnfk_office = This.p_fk_office


ldStartDate = This.p_start_d8
ldEndDate = This.p_end_d8



If !Empty(lnfk_office)
	lcwhereclause = ' and reminders.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif

lcWhereClause2 = ''
DO CASE
	CASE lnOption = 0 &&& over due
		lcWhereClause2 = ' and EMPTY(reminders.d8_complete)  and reminders.d8_due  =>  CTOD("'+DTOC(ldStartDate)+'")  and reminders.d8_due <= CTOD("'+DTOC(ldendDate)+'") '
	CASE lnOption = 1 &&& completed
		lcWhereClause2 = ' and !EMPTY(reminders.d8_complete)  and reminders.d8_complete  =>  CTOD("'+DTOC(ldStartDate)+'")  and reminders.d8_complete <= CTOD("'+DTOC(ldendDate)+'")'
	CASE lnOption = 2 &&& due
		lcWhereClause2 = ' and EMPTY(reminders.d8_complete)  and reminders.d8_due => CTOD("'+DTOC(ldendDate)+'") '
ENDCASE




	

SELECT ;
	myOffices.office, ;
 	Reminder_type.cname as reminder_type, ;
	Clients.name_full as name_full_client, ;
	Employees.name_full as name_full_employee,;
  	Reminders.assign_to,;
  	Reminders.d8_orig,;
  	Reminders.d8_due,;
  	Reminders.d8_complete, ;
  	Reminders.heading,;
  	 Reminders.comment,;
  	 reminders.fk_office ,;
  	 .f. as lflag ;
 FROM ;
     reminder!reminders ;
     INNER JOIN myOffices ON myOffices.fk_office = reminders.fk_office ;
    INNER JOIN client!clients ON  Reminders.fk_client = Clients.pk ;
    INNER JOIN reminder!reminder_type ON  Reminders.fk_type = Reminder_type.pk ;
    INNER JOIN employee!employees ON  Reminders.fk_employee = Employees.pk;
   WHERE .t. = .t. &lcwhereclause &lcWhereClause2;
INTO Cursor myreportcursor1 Readwrite






Do Case
	Case lnOption = 0 &&& Due

		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,assign_to,d8_due '
		
	Case lnOption = 1 && completed
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro =' office,assign_to,d8_complete '
	
	Case lnOption = 2 &&& overdue

		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,assign_to,d8_due '
		
	
	
	
	Otherwise wise
		lnOption = 0
		Update myreportcursor1 Set lflag = .T.
		lcOrderMacro = ' office,assign_to,d8_due '
Endcase

Alines(aa,myReportOptions.Comment,1)

oApp.p_print_array(3) = 'Option '+aa(lnOption+2)




Select  * From myreportcursor1 ;
	WHERE lflag = .T. ;
	ORDER By &lcOrderMacro ;
	INTO Cursor myreportcursor Readwrite




Select myreportcursor

*modi report rptAgency_auths

If Reccount('myReportCursor') > 0
	Go Top

	Thisform.WindowState = 2
	Thisform.Refresh

	lcReportName = ALLTRIM(myReportOptions.rptName) &&
	** modi report rptAgency_auths

	Keyboard '{CTRL+F10}'
	Report Form &lcReportName To Printer Prompt Nodialog Preview


	Thisform.WindowState = 0
Else
	Messagebox('No Records selected!',0+4096,'No Records',3000)
Endif





ENDPROC
PROCEDURE m_sch_conflicts2
LPARAMETERS lcparam1, lcParam2, lnOption


**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcparam1)
	lcwhereclause = ''
ENDIF

SET NULLDISPLAY TO ''

LOCAL XTot, XCnt
XTot=0
XCnt=0


*!*	lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
*!*	lnfk_day_start = Dow(This.p_start_d8,2)
*!*	lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
*!*	lnfk_day_end = Dow(This.p_end_d8,2)


** for grid refresh

lcRecordsource = THIS.PARENT.pgf1.pag5.grd1.RECORDSOURCE
THIS.PARENT.pgf1.pag5.grd1.RECORDSOURCE = ''

SELECT * FROM myConflicts2 WHERE .T. = .F. INTO CURSOR myConflicts2 READWRITE

*!*	lddate1 = This.parent.starting_date.txtdate.Value
*!*	lddate2 = This.parent.ending_date.txtdate.Value

lnStart_Fk_wk = oapp.m_get_week_number(THIS.p_start_d8)
lnStart_Fk_day = DOW(THIS.p_start_d8,oapp.p_first_day_of_week)
lnEnd_fk_wk = oapp.m_get_week_number(THIS.p_end_d8)
lnEnd_fk_day = DOW(THIS.p_end_d8,oapp.p_first_day_of_week)

*!*	Select * ;
*!*		FROM timerecords ;
*!*		WHERE tc_date_work => lddate1 And tc_date_work <= lddate2 ;
*!*		INTO CURSOR myCheck


SELECT sch_employee.* , ;
	clients.name_full AS name_full_client, ;
	clients.fk_office AS fk_office_client, ;
	employees.name_full AS name_full_employee, ;
	employees.fk_office AS fk_office_employee ;
	FROM sch_employee ;
	INNER JOIN clients ON sch_employee.fk_client = clients.pk ;
	INNER JOIN employees ON sch_employee.fk_employee = employees.pk ;
	WHERE 10*fk_wk + fk_day => 10*lnStart_Fk_wk+lnStart_Fk_day ;
	AND 10*fk_wk + fk_day <=10*lnEnd_fk_wk+lnEnd_fk_day ;
	AND fk_employee > 1000 ;
	AND BLOCKSIZE > 0 ;
	INTO CURSOR myCheck


SELECT myCheck
GO TOP

XTot = RECCOUNT()



*---original code
SCAN

	WAIT WINDOW " Processing "+ALLTRIM(STR(XCnt))+" of "+ALLTRIM(STR(XTot)) NOWAIT


	lnFk_sch_employee = myCheck.pk
	lnfk_employee = myCheck.fk_employee
	lnFk_wk = myCheck.fk_wk
	lnFk_day = myCheck.fk_day
	lnT1 = myCheck.fk_ts +.01
	lnT2 = myCheck.fk_ts+BLOCKSIZE - .01
	lnpk = myCheck.pk

	SELECT * FROM myCheck ;
		WHERE (((fk_ts < lnT1 AND lnT1 < fk_ts+BLOCKSIZE) OR (fk_ts < lnT2 AND lnT2 < fk_ts+BLOCKSIZE)) ;
		AND fk_employee = lnfk_employee AND lnFk_day = fk_day AND lnFk_wk = fk_wk ) ;
		INTO CURSOR myDups

	IF _TALLY > 1


*!*			SELECT myCheck
*!*			SCATTER NAME oDup
*!*			INSERT INTO myconflicts FROM NAME oDup
*!*

		SELECT myDups
		SCAN
			lnpk2 = myDups.pk

			UPDATE myConflicts2 SET pk = lnpk2 WHERE pk = lnpk2
			IF _TALLY = 0

				SCATTER NAME oDup
				INSERT INTO myConflicts2 FROM NAME oDup
			ENDIF

		ENDSCAN

	ENDIF

	XCnt = XCnt + 1


ENDSCAN

WAIT CLEAR

*** now poplate the clients office
SELECT myOffices
SCAN
	lcOffice = myOffices.office
	lnfk_office = myOffices.fk_office
	UPDATE myConflicts2 ;
		SET employee_office = lcOffice WHERE fk_office_employee = lnfk_office
	UPDATE myConflicts2 ;
		SET client_office = lcOffice WHERE fk_office_client = lnfk_office



ENDSCAN

UPDATE myConflicts2 ;
	SET ldate = oapp.m_get_date_from_week_day(fk_wk,fk_day)

*** now update the timeslots

SELECT timeslots
SCAN
	lnpk = timeslots.pk

	lcTime = timeslots.timeslot
	UPDATE myConflicts2 SET timein = lcTime WHERE fk_ts = lnpk
	UPDATE myConflicts2 SET TIMEOUT = lcTime WHERE fk_ts+BLOCKSIZE = lnpk

ENDSCAN

UPDATE myConflicts2 SET TIMEOUT = 'Overnight' WHERE fk_ts+BLOCKSIZE => 49


IF !EMPTY(THIS.p_fk_office)
	lnfk_office = THIS.p_fk_office
	SELECT * FROM myConflicts2 ;
		WHERE fk_office_employee = lnfk_office  OR fk_office_client = lnfk_office ;
		INTO CURSOR myTemp
ELSE

	SELECT * FROM myConflicts2 INTO CURSOR myTemp
ENDIF



SELECT * FROM myTemp ;
	ORDER BY name_full_employee,name_full_client,timein, TIMEOUT ;
	INTO CURSOR myreportcursor


SELECT myreportcursor
IF RECCOUNT('myReportCursor') > 0
	GO TOP

	THISFORM.WINDOWSTATE = 2
	THISFORM.REFRESH


*MODIFY REPORT xxx
*lcReportName = 'rptEmployeeConflicts2'
	lcReportName = ALLTRIM(myReportOptions.rptName)
	KEYBOARD '{CTRL+F10}'
	REPORT FORM &lcReportName TO PRINTER PROMPT NODIALOG PREVIEW


	THISFORM.WINDOWSTATE = 0

ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF



SELECT * FROM myTemp ;
	ORDER BY ldate,name_full_employee,name_full_client,timein, TIMEOUT ;
	INTO CURSOR myConflicts2
THIS.PARENT.pgf1.pag5.grd1.RECORDSOURCE = lcRecordsource
THIS.PARENT.pgf1.pag5.grd1.REFRESH
THIS.PARENT.pgf1.pag5.CAPTION = 'Conflicts'
THIS.PARENT.pgf1.pag5.ENABLED = .T.


ENDPROC
PROCEDURE m_sch_conflicts3
LPARAMETERS lcparam1, lcParam2, lnOption


**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcparam1)
	lcwhereclause = ''
ENDIF

SET NULLDISPLAY TO ''

LOCAL XTot, XCnt, LastRecordDupe, lnOverNightWk, lnWrapAround_Wk, lnWrapAround_Day, lnWrapAround_Ts, lnWrapAround_BlockSize

XTot				=0
XCnt				=0
LastRecordDupe 		= .F.
lnOverNightWk		= 0
lnWrapAround_Wk 	= 0
lnWrapAround_Day 	= 0
lnWrapAround_Ts 	= 0
lnWrapAround_BlockSize = 0

*!*	lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
*!*	lnfk_day_start = Dow(This.p_start_d8,2)
*!*	lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
*!*	lnfk_day_end = Dow(This.p_end_d8,2)


** for grid refresh

lcRecordsource = THIS.PARENT.pgf1.pag5.grd1.RECORDSOURCE
THIS.PARENT.pgf1.pag5.grd1.RECORDSOURCE = ''

SELECT * FROM myConflicts2 WHERE .T. = .F. INTO CURSOR myConflicts2 READWRITE

*!*	lddate1 = This.parent.starting_date.txtdate.Value
*!*	lddate2 = This.parent.ending_date.txtdate.Value

lnStart_Fk_wk = oapp.m_get_week_number(THIS.p_start_d8)
lnStart_Fk_day = DOW(THIS.p_start_d8,oapp.p_first_day_of_week)
lnEnd_fk_wk = oapp.m_get_week_number(THIS.p_end_d8)
lnEnd_fk_day = DOW(THIS.p_end_d8,oapp.p_first_day_of_week)
lnOverNightWk = lnStart_Fk_Wk - 1


*---modified by MHS 8/2010


*---get schedules from selected weeks plus any overnights for day 7 of the previous week

SELECT ;
	sch_Employee.pk,;
	sch_Employee.fk_Client,;
	sch_Employee.fk_wk,;
	Sch_Employee.fk_Day,;
	Sch_Employee.fk_Ts,;
	Sch_Employee.Blocksize,;
	Sch_Employee.fk_Employee,;
	clients.name_full AS name_full_client, ;
	clients.fk_office AS fk_office_client, ;
	employees.name_full AS name_full_employee, ;
	employees.fk_office AS fk_office_employee, ;
	Auth.fk_Service, ;
	.F. AS Added ;
FROM sch_employee ;
	INNER JOIN clients ON sch_employee.fk_client = clients.pk ;
	INNER JOIN employees ON sch_employee.fk_employee = employees.pk ;
	INNER JOIN Auth ON sch_employee.fk_Auth = auth.pk ;
WHERE fk_wk => lnStart_Fk_wk ;
	AND fk_wk <= lnEnd_fk_wk ;
	AND fk_employee > 1000 ;
	AND BLOCKSIZE > 0 ;
UNION ;
	SELECT ;
		sch_Employee.pk,;
		sch_Employee.fk_Client,;
		sch_Employee.fk_wk,;
		Sch_Employee.fk_Day,;
		Sch_Employee.fk_Ts,;
		Sch_Employee.Blocksize,;
		Sch_Employee.fk_Employee,;
		clients.name_full AS name_full_client, ;
		clients.fk_office AS fk_office_client, ;
		employees.name_full AS name_full_employee, ;
		employees.fk_office AS fk_office_employee, ;
		Auth.fk_Service, ;
		.F. AS Added ;
	FROM sch_employee ;
		INNER JOIN clients ON sch_employee.fk_client = clients.pk ;
		INNER JOIN employees ON sch_employee.fk_employee = employees.pk ;
		INNER JOIN Auth ON sch_employee.fk_Auth = auth.pk ;
	WHERE Sch_Employee.fk_wk = lnOverNightWk ;
		AND Sch_Employee.fk_Day = 7 ;
		AND Sch_Employee.fk_employee > 1000 ;
		AND Sch_Employee.BLOCKSIZE > 0 ;
		AND Auth.fk_Service = 6 ;
	INTO CURSOR myCheck1 READWRITE ;
	ORDER BY 7,3,4,5 ;
	NOWAIT

XTot=RECCOUNT()
XCnt = 1

* create cursor to hold additional records for overnights
SELECT * FROM myCheck1 WHERE .T. = .F. INTO CURSOR myCheck_ON READWRITE

SELECT myCheck1

*----convert any overnight service to the proper period and add additional record for the next day

SCAN

	WAIT WINDOW " Checking for Overnight Service -- PROCESSING "+ALLTRIM(STR(XCnt))+" OF "+ALLTRIM(STR(XTot)) NOWAIT


	*---add records for any overnight schedules that wrap around
	IF fk_Service = 6 AND (! Added)

		IF (fk_ts + blocksize -1) > 48 && we have a wraparound

			lnWrapAround_Ts 	= 1
			lnWrapAround_BlockSize = (fk_Ts + Blocksize - 1) - 48

			*---we need to make the existing schedule end at midnight
			REPLACE BlockSize WITH 48 - fk_ts

			IF fk_day = 7 && Wraps around to Sunday
				lnWrapAround_Day = 1
				lnWrapAround_Wk = fk_Wk + 1

			ELSE
				lnWrapAround_Day = fk_Day + 1			
				lnWrapAround_Wk = fk_Wk
			
			ENDIF

			*---create new record to be added to the list of schedules
			SCATTER NAME oOvernight
			
			m.oOvernight.fk_wk		=lnWrapAround_Wk
			m.oOvernight.fk_Day		=lnWrapAround_Day
			m.oOvernight.fk_Ts		=lnWrapAround_Ts
			m.oOvernight.Blocksize	=lnWrapAround_BlockSize
			m.oOvernight.Added=.T.
	
			INSERT INTO myCheck_ON FROM NAME oOvernight
	
		ENDIF

	ENDIF

	XCnt = XCnt + 1

ENDSCAN

WAIT CLEAR

SELECT MyCheck_ON

SELECT * ;
	FROM MyCheck1  ;
	WHERE fk_Wk > lnOverNightWk ;
UNION ;
	SELECT * ;
	FROM MyCheck_ON ;	
	INTO CURSOR MyCheck READWRITE;
ORDER BY 7,3,4,5 ;

USE IN MyCheck1
USE IN MyCheck_ON

*-----we're always working with a full week -- no need to select by day

SELECT myCheck
GO TOP
lnFk_sch_employee = myCheck.pk
lnfk_employee = 0
lnFk_wk = 0
lnFk_day = 0
lnT1 = myCheck.fk_ts +.01
lnT2 = myCheck.fk_ts+BLOCKSIZE - .01
lnpk = myCheck.pk

XTot = RECCOUNT()
XCnt = 1

SCATTER NAME oDupLast

SCAN

	WAIT WINDOW " Looking for Conflicts:  Processing ===> "+ALLTRIM(STR(XCnt))+" of "+ALLTRIM(STR(XTot)) NOWAIT

	*---test if we're still on the same employee
	IF fk_Employee = lnFk_Employee
		
		*---test to see if we're still the same week
		IF fk_Wk = lnfk_Wk

			*--test to see if we're still on the same day
			IF fk_Day = lnfk_day

				*---test for a conflict
				IF ((fk_ts < lnT1 AND lnT1 < fk_ts+BLOCKSIZE) OR (fk_ts < lnT2 AND lnT2 < fk_ts+BLOCKSIZE)) OR (fk_ts > lnT1 AND fk_ts+BLOCKSIZE < lnT2)

					*---we have a conflict, record it


					*---if we haven't already, put in previous record
					IF ! LastRecordDupe
						INSERT INTO myConflicts2 FROM NAME oDupLast
					ENDIF

					SCATTER NAME oDup
					INSERT INTO myConflicts2 FROM NAME oDup

					LastRecordDupe = .T.
				ELSE
					LastRecordDupe = .F.

				ENDIF

			ELSE
				LastRecordDupe = .F.
			ENDIF
		ELSE
			LastRecordDupe = .F.
		ENDIF
	ELSE
		LastRecordDupe = .F.
	ENDIF

	SELECT myCheck

	lnFk_sch_employee = myCheck.pk
	lnfk_employee = myCheck.fk_employee
	lnFk_wk = myCheck.fk_wk
	lnFk_day = myCheck.fk_day
	lnT1 = myCheck.fk_ts +.01
	lnT2 = myCheck.fk_ts+BLOCKSIZE - .01
	lnpk = myCheck.pk

	*---save last record in case we need to record it as a "dupe"
	SCATTER NAME oDupLast

	XCnt = XCnt + 1

ENDSCAN

WAIT CLEAR

*** now poplate the clients office
SELECT myOffices
SCAN
	lcOffice = myOffices.office
	lnfk_office = myOffices.fk_office
	UPDATE myConflicts2 ;
		SET employee_office = lcOffice WHERE fk_office_employee = lnfk_office
	UPDATE myConflicts2 ;
		SET client_office = lcOffice WHERE fk_office_client = lnfk_office



ENDSCAN

UPDATE myConflicts2 ;
	SET ldate = oapp.m_get_date_from_week_day(fk_wk,fk_day)

*** now update the timeslots

SELECT timeslots
SCAN
	lnpk = timeslots.pk

	lcTime = timeslots.timeslot
	UPDATE myConflicts2 SET timein = lcTime WHERE fk_ts = lnpk
	UPDATE myConflicts2 SET TIMEOUT = lcTime WHERE fk_ts+BLOCKSIZE = lnpk

ENDSCAN

SELECT myConflicts2

IF !EMPTY(THIS.p_fk_office)
	lnfk_office = THIS.p_fk_office
	SELECT * FROM myConflicts2 ;
		WHERE fk_office_employee = lnfk_office  OR fk_office_client = lnfk_office ;
		INTO CURSOR myTemp
ELSE

	SELECT * FROM myConflicts2 INTO CURSOR myTemp
ENDIF


SELECT myconflicts2


SELECT * FROM myTemp ;
	ORDER BY name_full_employee,name_full_client,timein, TIMEOUT ;
	INTO CURSOR myreportcursor


SELECT myreportcursor
IF RECCOUNT('myReportCursor') > 0
	GO TOP

	THISFORM.WINDOWSTATE = 2
	THISFORM.REFRESH


*MODIFY REPORT xxx
*lcReportName = 'rptEmployeeConflicts2'

	lcReportName = ALLTRIM(myReportOptions.rptName)
	KEYBOARD '{CTRL+F10}'
	REPORT FORM &lcReportName TO PRINTER PROMPT NODIALOG PREVIEW


	THISFORM.WINDOWSTATE = 0

ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF



SELECT * FROM myTemp ;
	ORDER BY ldate,name_full_employee,name_full_client,timein, TIMEOUT ;
	INTO CURSOR myConflicts2
THIS.PARENT.pgf1.pag5.grd1.RECORDSOURCE = lcRecordsource
THIS.PARENT.pgf1.pag5.grd1.REFRESH
THIS.PARENT.pgf1.pag5.CAPTION = 'Conflicts'
THIS.PARENT.pgf1.pag5.ENABLED = .T.

ENDPROC
PROCEDURE m_schedule_conflicts
Lparameters lcparam1, lcParam2, lnOption


**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF

Set NullDisplay To ''




lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office


*!*	If !Empty(lnfk_office)
*!*		lcwhereclause = ' fk_office = '+Alltrim(Str(lnfk_office))
*!*	Else
*!*		lcwhereclause = ''
*!*	Endif

*** create the working cursor

SELECT SPACE(50) as name_full, SPACE(20) as office, conflicts.*, SPACE(50) as ident FROM lookups!conflicts INTO CURSOR myWorkingCursor readwrite

INDEX ON ident TAG IDent


*** now find all records where they are overnight


*** weekly records
IF !EMPTY(lnfk_office)
SELECT employees.name_full, myOffices.office, employees.fk_office, fk_employee, fk_wk, fk_day, fk_ts, blocksize  ;
	FROM sch_employee ;
	INNER JOIN employees ON sch_employee.fk_employee = employees.pk ;
	INNER JOIN clients ON sch_employee.fk_client = clients.pk ;
	LEFT OUTER JOIN myOffices ON clients.fk_office = myOffices.fk_office ;
	WHERE sch_employee.fk_employee > 1000 ;
		AND clients.fk_office = lnFk_office ;
		AND sch_employee.blocksize > 0 ;
		AND 10*sch_employee.fk_wk + sch_employee.fk_day => 10*lnfk_wk_start + lnFk_day_start ;
		AND 10*sch_employee.fk_wk + sch_employee.fk_day <= 10*lnfk_wk_end + lnFk_day_end ;
		ORDER BY fk_employee, fk_wk, fk_day, fk_ts ;
		INTO CURSOR myTempSchedules
else
SELECT employees.name_full, myOffices.office, employees.fk_office, fk_employee, fk_wk, fk_day, fk_ts, blocksize  ;
		FROM sch_employee ;
	INNER JOIN employees ON sch_employee.fk_employee = employees.pk ;
	INNER JOIN clients ON sch_employee.fk_client = clients.pk ;
	LEFT OUTER JOIN myOffices ON clients.fk_office = myOffices.fk_office ;
	WHERE sch_employee.fk_employee > 1000 ;
		AND sch_employee.blocksize > 0 ;
		AND 10*sch_employee.fk_wk + sch_employee.fk_day => 10*lnfk_wk_start + lnFk_day_start ;
		AND 10*sch_employee.fk_wk + sch_employee.fk_day <= 10*lnfk_wk_end + lnFk_day_end ;
		ORDER BY fk_employee, fk_wk, fk_day, fk_ts ;
		INTO CURSOR myTempSchedules
ENDIF

*!*	IF !EMPTY(lnfk_office)

*!*		SELECT name_full, office, fk_employee, fk_wk, fk_day, ;
*!*			ALLTRIM(STR(fk_employee))+'_'+ALLTRIM(STR(fk_wk))+'_'+ALLTRIM(STR(fk_day)) as ident ;
*!*			FROM myTempSchedules WHERE fk_office = lnfk_office  GROUP BY name_full, office,fk_employee, fk_wk, fk_day INTO CURSOR mytemp2
*!*	ELSE
	SELECT name_full, office, fk_employee, fk_wk, fk_day, ;
		ALLTRIM(STR(fk_employee))+'_'+ALLTRIM(STR(fk_wk))+'_'+ALLTRIM(STR(fk_day)) as ident ;
		FROM myTempSchedules  GROUP BY name_full, office,fk_employee, fk_wk, fk_day INTO CURSOR mytemp2
*!*	ENDIF

SELECT myWorkingCursor
APPEND FROM DBF('mytemp2')
	
		
SELECT myTempSchedules
GO top
SCAN

	*** need to find record
	lcIdent = ALLTRIM(STR(myTempSchedules.fk_employee))+'_'+ALLTRIM(STR(myTempSchedules.fk_wk))+'_'+ALLTRIM(STR(myTempSchedules.fk_day))
	IF 	INDEXSEEK(lcIdent,.t.,'myWorkingCursor','ident')
	
lWrapAround = .f.
ln2WrapAround = 0
		ln1 = myTempSchedules.fk_ts
		ln2 = myTempSchedules.fk_ts + myTempSchedules.blocksize-1
		IF ln2 > 48
			ln2 = 48
			lWrapAround = .t.
			ln2WrapAround = (myTempSchedules.fk_ts + myTempSchedules.blocksize-1) - 48
		ENDIF
		
		FOR ix = ln1 TO ln2
				lcIx = 'T_'+ALLTRIM(STR(ix))
			replace &lcIx WITH &lcIx + 1 IN 'myWorkingCursor'
			IF myWorkingCursor.&lcIx > 1
			** we have a conflict
				replace conflict WITH .t. IN  'myWorkingCursor'
			ENDIF
			
		endfor
	IF lWrapAround
	IF myTempSchedules.fk_day < 7   &&& wraps around to monday
		lnWrapAroundDay = myTempSchedules.fk_day +1
		lnWrapAroundWeek = myTempSchedules.fk_wk
	ELSE
		lnWrapAroundDay = 1	
		lnWrapAroundWeek = myTempSchedules.fk_wk +1	
	ENDIF
	
	
	lcIdent = ALLTRIM(STR(myTempSchedules.fk_employee))+'_'+ALLTRIM(STR(lnWrapAroundWeek))+'_'+ALLTRIM(STR(lnWrapAroundDay))
	IF 	INDEXSEEK(lcIdent,.t.,'myWorkingCursor','ident')
	FOR ix = 1 TO ln2WrapAround
				lcIx = 'T_'+ALLTRIM(STR(ix))
			replace &lcIx WITH &lcIx + 1 IN 'myWorkingCursor'
			IF myWorkingCursor.&lcIx > 1
			** we have a conflict
				replace conflict WITH .t. IN  'myWorkingCursor'
			ENDIF
			
		endfor
	
	ENDIF
	
	ENDIF
	
	
	ELSE
		* not from selected office
		MESSAGEBOX('Error, could not find??')
		SET STEP ON
	ENDIF
	
	
	

ENDSCAN
		


SELECT name_full, office, oapp.m_get_date_from_week_day(fk_wk,fk_day) as lDate ;
FROM myWorkingCursor ;
	WHERE conflict = .t. ;
	ORDER BY office, name_full, lDate ;
	INTO CURSOR myReportcursor
	

Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT xxx
lcReportName = 'rptEmployeeConflicts'

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0		

ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF	
ENDPROC
PROCEDURE m_scheduled_wo_police_ck
Lparameters lcparam1, lcParam2, lnOption

IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF
*** we need to ignore those employees who worked before, quite and now reapply
*** the police check will be needed, however, they may not have a current schedule
*** we will default to prior 4 weeks

lnTestWeek = oapp.m_get_week_number(this.p_start_d8 ) - 4


*---added employees.d8_created as requested 12/09/2009 MHS

SELECT ;
	Employees.pk as fk_employee,;
	Employees.name_full,;
	employees.policeck_d8,;
	IIF(BITTEST(Employees.Bit_Setting,10),"Complete","        ") As RefCheck,;
	employees.rating,;
	employees.d8_created;
 FROM ;
     employee!employees ;
    INNER JOIN schedule!sch_employee ;
   ON  Employees.pk = Sch_employee.fk_employee;
 WHERE  Employees.status_eid = 1;
   AND  (EMPTY(Employees.policeck_d8) = .T. OR (! BITTEST(Employees.Bit_Setting,10)));
   AND sch_employee.fk_wk != 0 ;
   AND sch_employee.fk_wk > lnTestWeek ;
   AND sch_Employee.blocksize > 0 ;
 GROUP BY 1,2,3,4,5,6 ;
 ORDER BY Employees.pk, Employees.name_full ;
 INTO CURSOR myPendingEmployeeWoPoliceCk




 ** now we need to get client name and work schedule

 SELECT myPendingEmployeeWoPoliceCk.name_full as Employee_name, ;
 		myPendingEmployeeWoPoliceCk.policeck_d8, ;
 		myPendingEmployeeWoPoliceCk.rating, ;
 		myPendingEmployeeWoPoliceCk.refcheck, ;
 		myPendingEmployeeWoPoliceCk.d8_created, ;
 		clients.name_full as client_name, ;
 		oapp.m_get_date_from_week_day(sch_employee.fk_wk,sch_employee.fk_day) as lDate, ;
 		sch_employee.fk_employee, ;
 		sch_employee.fk_client, ;
 		sch_employee.fk_wk, ;
 		sch_employee.fk_day, ;
 		sch_employee.fk_ts, ;
 		sch_employee.blocksize ,;
 		.f. as ldelete ;
 		FROM sch_employee ;
 		inner join myPendingEmployeeWoPoliceCk on sch_employee.fk_employee = myPendingEmployeeWoPoliceCk.fk_employee ;
 		INNER JOIN clients ON sch_employee.fk_client = clients.pk ;
 		where sch_employee.fk_wk => lnTestweek AND ;
 		sch_employee.fk_employee in (SELECT fk_employee FROM myPendingEmployeeWoPoliceCk) ;
 		 		order by myPendingEmployeeWoPoliceCk.name_full,sch_employee.fk_wk,sch_employee.fk_day ;
 		INTO CURSOR myEmployeesNeedingPoliceCheck readwrite
 		
 	SELECT  myEmployeesNeedingPoliceCheck
 	GO top
 	
 	lcEmployee = ''
 	SCAN
 	IF lcEmployee = myEmployeesNeedingPoliceCheck.Employee_name
 		replace lDelete WITH .t.
 	ENDIF
 	lcEmployee = myEmployeesNeedingPoliceCheck.Employee_name
 	ENDSCAN
 		
 		
 SELECT * FROM 	myEmployeesNeedingPoliceCheck  WHERE !lDelete ORDER BY lDate INTO CURSOR myreportCursor	



Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh

lcReportName = ALLTRIM(myReportOptions.rptName)

Keyboard '{CTRL+F10}'
Report Form  &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0


ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF
 		
ENDPROC
PROCEDURE m_schedules_all
Lparameters lcparam1, lcParam2, lnOption

**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF

lnfk_office = This.p_fk_office


If !Empty(lnfk_office)
	lcwhereclause = ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif


Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif


lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office


If !Empty(lnfk_office)
	lcwhereclause = ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = ''
Endif


Select ;
	clients.name_full As name_full_client, ;
	clients.add1 As add1_client, ;
	clients.add2 As add2_client,;
	clients.town As town_client, ;
	clients.fk_office As fk_office_client, ;
	clients.bit_client As contact_bit, ;
	myoffices.office As client_office, ;
	clients.phone_1 As phone_1_client, ;
	clients.phone_2 As phone_2_client,;
	clients.phone_cell As phone_cell_client, ;
	clients.fk_priority, ;
	mypriority.priority, ;
	auth.start_d8, ;
	auth.end_d8,;
	auth.hold_start_d8, ;
	auth.rate, ;
	auth.period, ;
	auth.gasmileage,;
	auth.visit_total, ;
	payor.fk_service, ;
	myservices.service, ;
	employees.name_full As name_full_employee, ;
	employees.town As town_employee,;
	employees.fk_office As fk_office_employee, ;
	employees.phone_1 As phone_1_employee, ;
	employees.phone_2 As phone_2_employee,;
	employees.phone_cell As phone_cell_employee, ;
	employees.phone_beep As phone_beep_employee, ;
	sch_employee.fk_client, ;
	sch_employee.fk_auth,;
	sch_employee.fk_wk, ;
	sch_employee.fk_day, ;
	mydaynames.Dayname, ;
	{} As sched_date, ;
	sch_employee.fk_ts,;
	sch_employee.Blocksize, ;
	sch_employee.fk_employee, ;
	sch_employee.payrate,;
	sch_employee.bonus, ;
	sch_needs.fk_employee As needsemployee ,;
	timeslots.timeslot, ;
	mydummy.Comment As client_contact ;
	FROM ;
	schedule!sch_employee ;
	inner Join lookups!timeslots ;
	ON  sch_employee.fk_ts = timeslots.pk ;
	LEFT Outer Join employee!employees ;
	ON  sch_employee.fk_employee = employees.pk ;
	inner Join client!auth ;
	ON  sch_employee.fk_auth = auth.pk ;
	inner Join client!payor ;
	ON  auth.fk_payor = payor.pk ;
	inner Join client!clients ;
	ON  sch_employee.fk_client = clients.pk;
	inner Join schedule!sch_needs ;
	ON sch_employee.fk_sch_needs = sch_needs.pk ;
	inner Join myoffices ;
	ON myoffices.fk_office = clients.fk_office ;
	inner Join myservices ;
	ON myservices.fk_service =   payor.fk_service ;
	LEFT Outer Join mypriority ;
	ON mypriority.fk_priority = clients.fk_priority ;
	inner Join mydaynames ;
	ON mydaynames.fk_day = sch_employee.fk_day ;
	WHERE 	sch_employee.Blocksize > 0 and ;
	(10*sch_employee.fk_wk  + sch_employee.fk_day) => (10*lnfk_wk_start + lnfk_day_start) And;
	(10*sch_employee.fk_wk  + sch_employee.fk_day) <= (10*lnfk_wk_end + lnfk_day_end) ;
	&lcwhereclause ;
	ORDER By myoffices.office,clients.name_full, sch_employee.fk_wk, sch_employee.fk_day ;
	into Cursor myreportcursor Readwrite



*** now we need to add the rest of the fields
** BITTEST(contact_bit,0)  we do not need to contact contact first
** in contact table, bittest(bit_setting,0) indicates an emergency contact

Select myreportcursor
Go Top
Scan
	Replace sched_date With oapp.m_get_date_from_week_day(myreportcursor.fk_wk,myreportcursor.fk_day) In 'myReportCursor'

	If !Bittest(contact_bit,0)

		Select Name, phone1, phone2, phone_cell, Relation ;
			FROM contacts ;
			LEFT Outer Join myrelation ;
			ON myrelation.fk_relation = contacts.fk_relation ;
			WHERE fk_client = myreportcursor.fk_client ;
			AND Bittest(bit_setting,0) ;
			INTO Array mycontacts

		If _Tally # 0
			lccontact = ''
			For ix = 1 To Alen(mycontacts,1)
				If !Empty(lccontact)
					lccontact = lccontact + Chr(13)
				Endif
				If Isnull(mycontacts(ix,5))
					mycontacts(ix,5) = 'none'
				Endif

				lccontact = Alltrim(mycontacts(ix,1))+;
					' {'+Alltrim(mycontacts(ix,5))+;
					'} ('+Alltrim(mycontacts(ix,2))+;
					')('+Alltrim(mycontacts(ix,3))+;
					')('+Alltrim(mycontacts(ix,4))+')'

			Endfor


			Replace client_contact With lccontact In 'myReportCursor'
		Endif


	Endif



Endscan





Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule

Keyboard '{CTRL+F10}'
lcReportName = 'RPTSCHEDULE'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0
ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF




ENDPROC
PROCEDURE m_schedules_onhold
Lparameters lcparam1, lcParam2, lnOption


**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF



Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif

ldEndD8 = This.p_end_d8

lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office

lcwhereclause = ' and (!EMPTY(auth.hold_start_d8) ) '+;
				' and (auth.hold_start_d8 => auth.start_d8 ) '+;
				' and (EMPTY(auth.hold_end_d8) or (auth.hold_end_d8 => CTOD("'+DTOC(ldEndD8)+'"))) '
*lcwhereclause = ' and (!EMPTY(auth.hold_start_d8) and (auth.hold_start_d8 <= This.p_start_d8 and EMPTY(auth.hold_end_d8))) ' &&&&&&+;
*					' or (!EMPTY(auth.hold_start_d8) and (auth.hold_start_d8 <= This.p_start_d8 and auth.hold_end_d8 > this.p_end_d8))'

If !Empty(lnfk_office)
	lcwhereclause = lcwhereclause+ ' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = lcwhereclause+''
Endif


Select ;
	clients.name_full As name_full_client, ;
	clients.add1 As add1_client, ;
	clients.add2 As add2_client,;
	clients.town As town_client, ;
	clients.fk_office As fk_office_client, ;
	clients.bit_client As contact_bit, ;
	myoffices.office As client_office, ;
	clients.phone_1 As phone_1_client, ;
	clients.phone_2 As phone_2_client,;
	clients.phone_cell As phone_cell_client, ;
	clients.fk_priority, ;
	mypriority.priority, ;
	auth.fk_client, ;
	auth.start_d8, ;
	auth.end_d8,;
	auth.hold_start_d8, ;
	auth.hold_end_d8, ;
	auth.rate, ;
	auth.period, ;
	auth.gasmileage,;
	auth.visit_total, ;
	payor.fk_service, ;
	payor.name as payor_name, ;
	myservices.service, ;
	mydummy.Comment As client_contact ;
	FROM ;
		client!auth ;
	inner Join client!payor ;
	ON  auth.fk_payor = payor.pk ;
	inner Join client!clients ;
	ON  auth.fk_client = clients.pk;
	inner Join myoffices ;
	ON myoffices.fk_office = clients.fk_office ;
	inner Join myservices ;
	ON myservices.fk_service =   payor.fk_service ;
	LEFT Outer Join mypriority ;
	ON mypriority.fk_priority = clients.fk_priority ;	
	WHERE  clients.status_cid < 3 ;
	&lcwhereclause ;
	ORDER By myoffices.office,clients.name_full;
	into Cursor myreportcursor Readwrite



*** now we need to add the rest of the fields
** BITTEST(contact_bit,0)  we do not need to contact contact first
** in contact table, bittest(bit_setting,0) indicates an emergency contact

Select myreportcursor
Go Top
Scan
	*Replace sched_date With oapp.m_get_date_from_week_day(myreportcursor.fk_wk,myreportcursor.fk_day) In 'myReportCursor'

	If !Bittest(contact_bit,0)

		Select Name, phone1, phone2, phone_cell, Relation ;
			FROM contacts ;
			LEFT Outer Join myrelation ;
			ON myrelation.fk_relation = contacts.fk_relation ;
			WHERE fk_client = myreportcursor.fk_client ;
			AND Bittest(bit_setting,0) ;
			INTO Array mycontacts

		If _Tally # 0
			lccontact = ''
			For ix = 1 To Alen(mycontacts,1)
				If !Empty(lccontact)
					lccontact = lccontact + Chr(13)
				Endif
				If Isnull(mycontacts(ix,5))
					mycontacts(ix,5) = 'none'
				Endif

				lccontact = Alltrim(mycontacts(ix,1))+;
					' {'+Alltrim(mycontacts(ix,5))+;
					'} ('+Alltrim(mycontacts(ix,2))+;
					')('+Alltrim(mycontacts(ix,3))+;
					')('+Alltrim(mycontacts(ix,4))+')'

			Endfor


			Replace client_contact With lccontact In 'myReportCursor'
		Endif


	Endif



Endscan





Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptAuth
lcReportName = 'rptAuth'

Keyboard '{CTRL+F10}'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0

ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF


ENDPROC
PROCEDURE m_schedules_zero_pay
Lparameters lcparam1, lcParam2, lnOption


**** we need to verify the default values
** we assume an office is picked, if not then message is given
** we assume starting and ending date are give, if now
** then we will assume the next 7 days from todays date
IF EMPTY(lcParam1)
	lcwhereclause = ''
ENDIF



Nodefault
&&& place code here until completed then move to class
Set NullDisplay To ''

If !Used('myDummy')
	Create Cursor mydummy (Comment m)
Endif


lnfk_wk_start = oapp.m_get_week_number(This.p_start_d8)
lnfk_day_start = Dow(This.p_start_d8,oapp.p_first_day_of_week)
lnfk_wk_end = oapp.m_get_week_number(This.p_end_d8)
lnfk_day_end = Dow(This.p_end_d8,oapp.p_first_day_of_week)

lnfk_office = This.p_fk_office

lcwhereclause = ' and sch_employee.payrate < 5 and sch_employee.fk_employee > 0 '

If !Empty(lnfk_office)
	lcwhereclause = lcwhereclause +' and Clients.fk_office = '+Alltrim(Str(lnfk_office))
Else
	lcwhereclause = lcwhereclause +''
Endif


Select ;
	clients.name_full As name_full_client, ;
	clients.add1 As add1_client, ;
	clients.add2 As add2_client,;
	clients.town As town_client, ;
	clients.fk_office As fk_office_client, ;
	clients.bit_client As contact_bit, ;
	myoffices.office As client_office, ;
	clients.phone_1 As phone_1_client, ;
	clients.phone_2 As phone_2_client,;
	clients.phone_cell As phone_cell_client, ;
	clients.fk_priority, ;
	mypriority.priority, ;
	auth.start_d8, ;
	auth.end_d8,;
	auth.hold_start_d8, ;
	auth.rate, ;
	auth.period, ;
	auth.gasmileage,;
	auth.visit_total, ;
	payor.fk_service, ;
	myservices.service, ;
	employees.name_full As name_full_employee, ;
	employees.town As town_employee,;
	employees.fk_office As fk_office_employee, ;
	employees.phone_1 As phone_1_employee, ;
	employees.phone_2 As phone_2_employee,;
	employees.phone_cell As phone_cell_employee, ;
	employees.phone_beep As phone_beep_employee, ;
	sch_employee.fk_client, ;
	sch_employee.fk_auth,;
	sch_employee.fk_wk, ;
	sch_employee.fk_day, ;
	mydaynames.Dayname, ;
	{} As sched_date, ;
	sch_employee.fk_ts,;
	sch_employee.Blocksize, ;
	sch_employee.fk_employee, ;
	sch_employee.payrate,;
	sch_employee.bonus, ;
	sch_needs.fk_employee As needsemployee ,;
	timeslots.timeslot, ;
	mydummy.Comment As client_contact ;
	FROM ;
	schedule!sch_employee ;
	inner Join lookups!timeslots ;
	ON  sch_employee.fk_ts = timeslots.pk ;
	LEFT Outer Join employee!employees ;
	ON  sch_employee.fk_employee = employees.pk ;
	inner Join client!auth ;
	ON  sch_employee.fk_auth = auth.pk ;
	inner Join client!payor ;
	ON  auth.fk_payor = payor.pk ;
	inner Join client!clients ;
	ON  sch_employee.fk_client = clients.pk;
	inner Join schedule!sch_needs ;
	ON sch_employee.fk_sch_needs = sch_needs.pk ;
	inner Join myoffices ;
	ON myoffices.fk_office = clients.fk_office ;
	inner Join myservices ;
	ON myservices.fk_service =   payor.fk_service ;
	LEFT Outer Join mypriority ;
	ON mypriority.fk_priority = clients.fk_priority ;
	inner Join mydaynames ;
	ON mydaynames.fk_day = sch_employee.fk_day ;
	WHERE  sch_employee.Blocksize > 0 and ;
	(10*sch_employee.fk_wk  + sch_employee.fk_day) => (10*lnfk_wk_start + lnfk_day_start) And;
	(10*sch_employee.fk_wk  + sch_employee.fk_day) <= (10*lnfk_wk_end + lnfk_day_end) ;
	&lcwhereclause ;
	ORDER By myoffices.office,clients.name_full, sch_employee.fk_wk, sch_employee.fk_day ;
	into Cursor myreportcursor Readwrite



*** now we need to add the rest of the fields
** BITTEST(contact_bit,0)  we do not need to contact contact first
** in contact table, bittest(bit_setting,0) indicates an emergency contact

Select myreportcursor
Go Top
Scan
	Replace sched_date With oapp.m_get_date_from_week_day(myreportcursor.fk_wk,myreportcursor.fk_day) In 'myReportCursor'

	If !Bittest(contact_bit,0)

		Select Name, phone1, phone2, phone_cell, Relation ;
			FROM contacts ;
			LEFT Outer Join myrelation ;
			ON myrelation.fk_relation = contacts.fk_relation ;
			WHERE fk_client = myreportcursor.fk_client ;
			AND Bittest(bit_setting,0) ;
			INTO Array mycontacts

		If _Tally # 0
			lccontact = ''
			For ix = 1 To Alen(mycontacts,1)
				If !Empty(lccontact)
					lccontact = lccontact + Chr(13)
				Endif
				If Isnull(mycontacts(ix,5))
					mycontacts(ix,5) = 'none'
				Endif

				lccontact = Alltrim(mycontacts(ix,1))+;
					' {'+Alltrim(mycontacts(ix,5))+;
					'} ('+Alltrim(mycontacts(ix,2))+;
					')('+Alltrim(mycontacts(ix,3))+;
					')('+Alltrim(mycontacts(ix,4))+')'

			Endfor


			Replace client_contact With lccontact In 'myReportCursor'
		Endif


	Endif



Endscan





Select myreportcursor
IF RECCOUNT('myReportCursor') > 0
Go Top

Thisform.WindowState = 2
Thisform.Refresh


*MODIFY REPORT rptschedule

Keyboard '{CTRL+F10}'
lcReportName = 'RPTSCHEDULE'
Report Form &lcReportName To Printer Prompt Nodialog Preview


Thisform.WindowState = 0


ELSE
	MESSAGEBOX('No Records selected!',0+4096,'No Records',3000)
ENDIF

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
p_fk_office
p_start_d8
p_end_d8
*m_schedules_all List all schedules between 2 dates, include fills and opens
*m_schedules_zero_pay 
*m_schedules_onhold 
*m_age_report 
*m_open_matches 
*m_open_fills 
*m_missing_town_zip 
*m_missing_avail_towns 
*m_schedule_conflicts 
*m_billing_verify 
*m_missing_id 
*m_no_schedule 
*m_payor_verify 
*m_scheduled_wo_police_ck 
*m_priv_payor_check 
*m_employee_payrate 
*m_no_auths 
*m_agency_auths 
*m_phonelist 
*m_reminders 
*m_employees_inactive 
*m_open_fills_old 
*m_sch_conflicts2 
*m_miss_sch_auth 
*m_new_term_employee 
*m_client_list 
*m_email 
*m_employee_list 
*m_insurance_clients 
*m_employee_list2 
*m_sch_conflicts3 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] objreport
[EOF]
